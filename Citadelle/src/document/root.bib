% $Id: adb-long.bib 7880 2012-01-06 17:38:24Z brucker $
@PREAMBLE{ {\providecommand{\ac}[1]{\textsc{#1}} } 
	 # {\providecommand{\acs}[1]{\textsc{#1}} } 
	 # {\providecommand{\acf}[1]{\textsc{#1}} } 
	 # {\providecommand{\TAP}{T\kern-.1em\lower-.5ex\hbox{A}\kern-.1em P} } 
	 # {\providecommand{\leanTAP}{\mbox{\sf lean\it\TAP}} } 
	 # {\providecommand{\holz}{\textsc{hol-z}} } 
	 # {\providecommand{\holocl}{\textsc{hol-ocl}} } 
	 # {\providecommand{\isbn}{\textsc{isbn}} } 
         # {\providecommand{\Cpp}{C++} } 
         # {\providecommand{\Specsharp}{Spec\#} } 
	 # {\providecommand{\doi}[1]{\href{http://dx.doi.org/#1}{doi:
	   {\urlstyle{rm}\nolinkurl{#1}}}}} }
@STRING{conf-tphols="\acs{tphols}" }
@STRING{iso	= {International Organization for Standardization} }
@STRING{j-ar	= "Journal of Automated Reasoning" }
@STRING{j-cacm	= "Communications of the \acs{acm}" }
@STRING{j-acta-informatica =  "Acta Informatica" }
@STRING{j-sosym	= "Software and Systems Modeling" }
@STRING{j-sttt	= "International Journal on Software Tools for Technology (STTT)" }
@STRING{j-ist	= "Information and Software Technology" }
@STRING{j-toplas= "\acs{acm} Transactions on Programming Languages and
		  Systems" }
@STRING{j-tosem	= "\acs{acm} Transactions on Software Engineering and
		  Methodology" }
@STRING{j-eceasst="Electronic Communications of the \acs{easst}" }
@STRING{j-fac	= "Formal Aspects of Computing (FAC)" }
@STRING{j-ucs	= "Journal of Universal Computer Science" }
@STRING{j-sl	= "Journal of Symbolic Logic" }
@STRING{j-fp	= "Journal of Functional Programming" }
@STRING{j-tkde	= {\acs{ieee} Transaction on Knowledge and Data Engineering} }
@STRING{j-tse	= {\acs{ieee} Transaction on Software Engineering} }
@STRING{j-entcs	= {Electronic Notes in Theoretical Computer Science} }
@STRING{s-lni   = "Lecture Notes in Informatics" }
@STRING{s-lnai  = "Lecture Notes in Computer Science" }
@STRING{s-lncs  = "Lecture Notes in Computer Science" }
@STRING{s-lnbip = "Lecture Notes in Business Information Processing" }
@String{j-computer = "Computer"}
@String{j-tissec = "\acs{acm} Transactions on Information and System Security"}
@STRING{omg	= {Object Management Group} }
@STRING{j-ipl   = {Information Processing Letters} }
@STRING{j-login	= ";login: the USENIX Association newsletter" }

@STRING{PROC = "Proceedings of the " }
@String{j-nams                  = "Notices of the American Mathematical
                                  Society"}
@String{j-jucs = "Journal of Universal Computer Science"}
@String{j-acm = "Journal of the ACM (JACM)"}


% Conferences
% ============
@STRING{conf-sacmat = "ACM symposium on access control models and
                  technologies (SACMAT)"}
@STRING{conf-policy = "IEEE International Symposium on Policies for Distributed
		  Systems and Networks (POLICY)"}

% Publisher:
% ==========
@STRING{pub-awl	= {Addison-Wesley Longman, Inc.} }
@STRING{pub-awl:adr={Reading, MA, \acs{usa}} }
@STRING{pub-springer={Springer-Verlag} }
@STRING{pub-springer:adr={Heidelberg} }
@STRING{pub-cup	= {Cambridge University Press} }
@STRING{pub-cup:adr={New York, \acs{ny}, \acs{usa}} }
@STRING{pub-mit	= {\acs{mit} Press} }
@STRING{pub-mit:adr={Cambridge, Massachusetts} }
@STRING{pub-springer-ny={Springer-Verlag} }
,
@STRING{pub-springer-netherlands={Springer Netherlands} }
@STRING{pub-springer-netherlands:adr={} }
@STRING{pub-springer-ny:adr={New York, \acs{ny}, \acs{usa}} }
@STRING{pub-springer-london={Springer-Verlag} }
@STRING{pub-springer-london:adr={London} }
@STRING{pub-ieee= {\acs{ieee} Computer Society} }
@STRING{pub-ieee:adr={Los Alamitos, \acs{ca}, \acs{usa}} }
@STRING{pub-prentice={Prentice Hall, Inc.} }
@STRING{pub-prentice:adr={Upper Saddle River, \acs{nj}, \acs{usa}} }
@STRING{pub-acm	= {\acs{acm} Press} }
@STRING{pub-acm:adr={New York, \acs{ny} \acs{usa}} }
@STRING{pub-oxford={Oxford University Press, Inc.} }
@STRING{pub-oxford:adr={New York, \acs{ny}, \acs{usa}} }
@STRING{pub-kluwer={Kluwer Academic Publishers} }
@STRING{pub-kluwer:adr={Dordrecht} }
@STRING{pub-elsevier={Elsevier Science Publishers} }
@STRING{pub-elsevier:adr={Amsterdam} }
@STRING{pub-north={North-Holland Publishing Co.} }
@STRING{pub-north:adr={Nijmegen, The Netherlands} }
@STRING{pub-ios	= {\textsc{ios} Press} }
@STRING{pub-ios:adr={Amsterdam, The Netherlands} }
@STRING{pub-heise={Heise Zeitschriften Verlag} }
@STRING{pub-heise:adr={Hannover, Germany} }
@STRING{pub-wiley={John Wiley \& Sons} }
@STRING{pub-wiley:adr={} }

@Book{		  andrews:introduction:2002,
  author	= {Peter B. Andrews},
  title		= {Introduction to Mathematical Logic and Type Theory: To
		  Truth through Proof},
  year		= 2002,
  isbn		= {1-402-00763-9},
  edition	= {2nd},
  publisher	= pub-kluwer,
  address	= pub-kluwer:adr,
  acknowledgement={brucker, 2007-04-23},
  bibkey	= {andrews:introduction:2002}
}

@InProceedings{	  barnett.ea:spec:2004,
  author	= {Mike Barnett and K. Rustan M. Leino and Wolfram Schulte},
  abstract	= "Spec# is the latest in a long line of work on programming
		  languages and systems aimed at improving the development of
		  correct software. This paper describes the goals and
		  architecture of the Spec# programming system, consisting of
		  the object-oriented Spec# programming language, the Spec#
		  compiler, and the Boogie static program verifier. The
		  language includes constructs for writing specifications
		  that capture programmer intentions about how methods and
		  data are to be used, the compiler emits run-time checks to
		  enforce these specifications, and the verifier can check
		  the consistency between a program and its specifications.",
  language	= {USenglish},
  title		= {The {\Specsharp} programming system: An overview},
  pages		= {49--69},
  crossref	= {barthe.ea:construction:2005},
  bibkey	= {barnett.ea:spec:2004},
  doi		= {10.1007/b105030},
  acknowledgement={brucker, 2007-02-19},
  month		= may # {~25}
}

@InProceedings{	  barrett.ea:cvc3:2007,
  author	= {Clark Barrett and Cesare Tinelli},
  title		= {CVC3},
  booktitle	= {CAV},
  year		= 2007,
  pages		= {298--302},
  doi		= {10.1007/978-3-540-73368-3_34},
  crossref	= {damm.ea:computer:2007}
}

@Proceedings{	  barthe.ea:construction:2005,
  editor	= {Gilles Barthe and Lilian Burdy and Marieke Huisman and
		  Jean-Louis Lanet and Traian Muntean},
  title		= {Construction and Analysis of Safe, Secure, and
		  Interoperable Smart Devices (\acs{cassis})},
  booktitle	= {Construction and Analysis of Safe, Secure, and
		  Interoperable Smart Devices (\acs{cassis})},
  publisher	= pub-springer,
  address	= pub-springer:adr,
  series	= s-lncs,
  volume	= 3362,
  year		= 2005,
  isbn		= {978-3-540-24287-1},
  acknowledgement={brucker, 2007-02-19},
  doi		= {10.1007/b105030}
}

@Proceedings{	  bezivin.ea:unified:1999,
  editor	= {Jean B{\'e}zivin and Pierre-Alain Muller},
  doi		= {10.1007/b72309},
  booktitle	= {The Unified Modeling Language. \guillemotleft
		  \acs{uml}\guillemotright'98: Beyond the Notation},
  title		= {The Unified Modeling Language. \guillemotleft
		  \acs{uml}\guillemotright'98: Beyond the Notation},
  publisher	= pub-springer,
  address	= pub-springer:adr,
  acknowledgement={brucker, 2007-04-23},
  series	= s-lncs,
  volume	= 1618,
  year		= 1999,
  isbn		= {3-540-66252-9}
}

@InProceedings{	  blanchette.ea:nitpick:2010,
  author	= {Jasmin Christian Blanchette and Tobias Nipkow},
  title		= {Nitpick: A Counterexample Generator for Higher-Order Logic
		  Based on a Relational Model Finder},
  booktitle	= {ITP},
  year		= 2010,
  pages		= {131--146},
  doi		= {10.1007/978-3-642-14052-5_11},
  crossref	= {kaufmann.ea:interactive:2010}
}

@Article{	  church:types:1940,
  author	= {Church, Alonzo},
  title		= {A formulation of the simple theory of types},
  journal	= j-sl,
  year		= 1940,
  volume	= 5,
  number	= 2,
  month		= jun,
  pages		= {56--68},
  acknowledgement={brucker, 2007-04-23},
  bibkey	= {church:types:1940}
}

@Proceedings{	  clark.ea:object:2002,
  editor	= {Tony Clark and Jos Warmer},
  booktitle	= {Object Modeling with the \acs{ocl}: The Rationale behind
		  the Object Constraint Language},
  title		= {Object Modeling with the \acs{ocl}: The Rationale behind
		  the Object Constraint Language},
  publisher	= pub-springer,
  address	= pub-springer:adr,
  series	= s-lncs,
  volume	= 2263,
  year		= 2002,
  isbn		= {3-540-43169-1},
  acknowledgement={brucker, 2007-02-19},
  tags		= {MDE},
  clearance	= {unclassified},
  timestap	= {2008-05-26}
}

@InProceedings{	  cook.ea::amsterdam:2002,
  abstract	= {In November 1998 the authors participated in a two-day
		  workshop on the Object Constraint Language (OCL) in
		  Amsterdam. The focus was to clarify issues about the
		  semantics and the use of OCL, and to discuss useful and
		  necessary extensions of OCL. Various topics have been
		  raised and clarified. This manifesto contains the results
		  of that workshop and the following work on these topics.
		  Overview of OCL.},
  author	= {Steve Cook and Anneke Kleppe and Richard Mitchell and
		  Bernhard Rumpe and Jos Warmer and Alan Wills},
  title		= {The Amsterdam Manifesto on \acs{ocl}},
  pages		= {115--149},
  crossref	= {clark.ea:object:2002},
  acknowledgement={brucker, 2007-02-19},
  tags		= {MDE},
  clearance	= {unclassified},
  timestap	= {2008-05-26}
}

@Proceedings{	  damm.ea:computer:2007,
  editor	= {Werner Damm and Holger Hermanns},
  title		= {Computer Aided Verification, 19th International
		  Conference, CAV 2007, Berlin, Germany, July 3-7, 2007,
		  Proceedings},
  booktitle	= {CAV},
  publisher	= pub-springer,
  series	= s-lncs,
  volume	= 4590,
  year		= 2007,
  isbn		= {978-3-540-73367-6}
}

@InProceedings{	  gogolla.ea:expressing:2001,
  author	= {Martin Gogolla and Mark Richters},
  bibkey	= {gogolla.ea:expressing:2001},
  abstract	= {The Unified Modeling Language \acs{uml} is a complex
		  language offering many modeling features. Especially the
		  description of static structures with class diagrams is
		  supported by a rich set of primitives. This paper shows how
		  to transfrom \acs{uml} class diagrams involving cardinality
		  constraints, qualifiers, association classes, aggregations,
		  compositions, and generalizations into equivalent \acs{uml}
		  class diagrams employing only binary associations and
		  \acs{ocl} constraints. Thus we provide a better
		  understanding of \acs{uml} features. By reducing more
		  complex features in terms of basic ones, we suggest an easy
		  way users can gradually extend the set of \acs{uml}
		  elements they commonly apply in the modeling process.},
  title		= {Expressing \acs{uml} Class Diagrams Properties with
		  \acs{ocl}},
  pages		= {85--114},
  crossref	= {clark.ea:object:2002},
  acknowledgement={brucker, 2007-02-19},
  tags		= {MDE},
  clearance	= {unclassified},
  timestap	= {2008-05-26}
}

@Proceedings{	  grumberg.ea:tools:2007,
  editor	= {Orna Grumberg and Michael Huth},
  title		= {Tools and Algorithms for the Construction and Analysis of
		  Systems, 13th International Conference, TACAS 2007, Held as
		  Part of the Joint European Conferences on Theory and
		  Practice of Software, ETAPS 2007 Braga, Portugal, March 24
		  - April 1, 2007, Proceedings},
  booktitle	= {TACAS},
  publisher	= pub-springer,
  address	= pub-springer:adr,
  series	= s-lncs,
  volume	= 4424,
  year		= 2007,
  isbn		= {978-3-540-71208-4}
}

@InProceedings{	  hamie.ea:reflections:1998,
  bibkey	= {hamie.ea:reflections:1998},
  author	= {Ali Hamie and Franco Civello and John Howse and Stuart
		  Kent and Richard Mitchell},
  title		= {{Reflections on the Object Constraint Language}},
  year		= 1998,
  doi		= {10.1007/b72309},
  topic		= {formalism},
  acknowledgement={brucker, 2007-04-23},
  pages		= {162--172},
  crossref	= {bezivin.ea:unified:1999},
  abstract	= {The \acf{ocl}, which forms part of the \acs{uml} set of
		  modelling notations, is a precise, textual language for
		  expressing constraints that cannot be shown
		  diagrammatically in \acs{uml}. This paper reflects on a
		  number of aspects of the syntax and semantics of the
		  \acs{ocl}, and makes proposals for clarification or
		  extension. Specifically, the paper suggests that: the
		  concept of flattening collections of collections is
		  unnecessary, state models should be connectable to class
		  models, defining object creation should be made more
		  convenient, \acs{ocl} should be based on a 2-valued logic,
		  set subtraction should be covered more fully, and a "let"
		  feature should be introduced. }
}

@Proceedings{	  kaufmann.ea:interactive:2010,
  editor	= {Matt Kaufmann and Lawrence C. Paulson},
  title		= {Interactive Theorem Proving, First International
		  Conference, ITP 2010, Edinburgh, UK, July 11-14, 2010.
		  Proceedings},
  booktitle	= {ITP},
  publisher	= pub-springer,
  series	= s-lncs,
  volume	= 6172,
  year		= 2010,
  isbn		= {978-3-642-14051-8},
  doi		= {10.1007/978-3-642-14052-5}
}

@InProceedings{	  kosiuczenko:specification:2006,
  author	= {Piotr Kosiuczenko},
  title		= {Specification of Invariability in \acs{ocl}},
  pages		= {676--691},
  doi		= {10.1007/11880240_47},
  crossref	= {nierstrasz.ea:model:2006},
  abstract	= {The paradigm of contractual specification provides a
		  transparent way of specifying systems. It clearly
		  distinguishes between client and implementer obligations.
		  One of the best known languages used for this purpose is
		  OCL. Nevertheless, OCL does not provide primitives for a
		  compact specification of what remains unchanged when a
		  method is executed. In this paper, problems with specifying
		  invariability are listed and some weaknesses of existing
		  solutions are pointed out. The question of specifying
		  invariability in OCL is studied and a simple but expressive
		  and flexible extension is proposed. It is shown that this
		  extension has a simple OCL based semantics.}
}

@InProceedings{	  krieger.ea:generative:2010,
  author	= {Matthias P. Krieger and Alexander Knapp and Burkhart
		  Wolff},
  title		= {Generative Programming and Component Engineering},
  booktitle	= {International Conference on Generative Programming and
		  Component Engineering (GPCE 2010)},
  month		= oct,
  location	= {Eindhoven, The Netherlands, October 10-13, 2010},
  year		= 2010,
  pages		= {53--62},
  ee		= {http://doi.acm.org/10.1145/1868294.1868303},
  editor	= {Eelco Visser and Jaakko J{\"a}rvi},
  publisher	= {ACM},
  isbn		= {978-1-4503-0154-1},
  abstract	= {Operation contracts consisting of pre- and postconditions
		  are a well-known means of specifying operations. In this
		  paper we deal with the problem of operation contract
		  simulation, i.e., determining operation results satisfying
		  the postconditions based on input data supplied by the
		  user; simulating operation contracts is an important
		  technique for requirements validation and prototyping.
		  Current approaches to operation contract simulation exhibit
		  poor performance for large sets of input data or require
		  additional guidance from the user. We show how these
		  problems can be alleviated and describe an efficient as
		  well as fully automatic approach. It is implemented in our
		  tool OCLexec that generates from UML/OCL operation
		  contracts corresponding Java implementations which call a
		  constraint solver at runtime. The generated code can serve
		  as a prototype. A case study demonstrates that our approach
		  can handle problem instances of considerable size.}
}

@InProceedings{	  mandel.ea:ocl:1999,
  author	= {Luis Mandel and Mar{\`i}a Victoria Cengarle},
  bibkey	= {mandel.ea:ocl:1999},
  language	= {USenglish},
  topic		= {formalism},
  public	= {yes},
  title		= {On the expressive power of {\acs{ocl}}},
  acknowledgement={brucker, 2007-04-23},
  timestamp	= 962971498,
  abstract	= {This paper examines the expressive power of \acs{ocl} in
		  terms of navigability and computability. First the
		  expressive power of \acs{ocl} is compared with the
		  relational calculus; it is showed that \acs{ocl} is not
		  equivalent to the relational calculus. Then an algorithm
		  computing the transitive closure of a binary relation
		  operation that cannot be encoded in the relational calculus
		  is expressed in \acs{ocl}. Finally the equivalence of
		  \acs{ocl} with a Turing machine is pondered.},
  pages		= {854--874},
  crossref	= {wing.ea:world:1999},
  ee		= {http://link.springer.de/link/service/series/0558/bibs/1708/17080854.htm}
		  
}

@InProceedings{	  moura.ea:z3:2008,
  author	= {Leonardo Mendon\c{c}a de Moura and Nikolaj Bj{\o}rner},
  title		= {Z3: An Efficient \acs{smt} Solver},
  booktitle	= {TACAS},
  year		= 2008,
  pages		= {337--340},
  doi		= {10.1007/978-3-540-78800-3_24},
  abstract	= {Satisfiability Modulo Theories (SMT) problem is a decision
		  problem for logical first order formulas with respect to
		  combinations of background theories such as: arithmetic,
		  bit-vectors, arrays, and uninterpreted functions. Z3 is a
		  new and efficient SMT Solver freely available from
		  Microsoft Research. It is used in various software
		  verification and analysis applications. },
  crossref	= {ramakrishnan.ea:tools:2008}
}

@Proceedings{	  nierstrasz.ea:model:2006,
  editor	= {Oscar Nierstrasz and Jon Whittle and David Harel and
		  Gianna Reggio},
  title		= {Model Driven Engineering Languages and Systems
		  (\acs{models})},
  booktitle	= {Model Driven Engineering Languages and Systems
		  (\acs{models})},
  address	= pub-springer:adr,
  location	= {Genova, Italy},
  publisher	= pub-springer,
  series	= s-lncs,
  acknowledgement={brucker, 2007-02-19},
  volume	= 4199,
  year		= 2006,
  doi		= {10.1007/11880240},
  isbn		= {978-3-540-45772-5}
}

@Book{		  nipkow.ea:isabelle:2002,
  author	= {Tobias Nipkow and Lawrence C. Paulson and Markus Wenzel},
  title		= {Isabelle/\acs{hol}---A Proof Assistant for Higher-Order
		  Logic},
  publisher	= pub-springer,
  address	= pub-springer:adr,
  series	= s-lncs,
  volume	= 2283,
  doi		= {10.1007/3-540-45949-9},
  abstract	= {This book is a self-contained introduction to interactive
		  proof in higher-order logic (\acs{hol}), using the proof
		  assistant Isabelle2002. It is a tutorial for potential
		  users rather than a monograph for researchers. The book has
		  three parts.
		  
		  1. Elementary Techniques shows how to model functional
		  programs in higher-order logic. Early examples involve
		  lists and the natural numbers. Most proofs are two steps
		  long, consisting of induction on a chosen variable followed
		  by the auto tactic. But even this elementary part covers
		  such advanced topics as nested and mutual recursion. 2.
		  Logic and Sets presents a collection of lower-level tactics
		  that you can use to apply rules selectively. It also
		  describes Isabelle/\acs{hol}'s treatment of sets, functions
		  and relations and explains how to define sets inductively.
		  One of the examples concerns the theory of model checking,
		  and another is drawn from a classic textbook on formal
		  languages. 3. Advanced Material describes a variety of
		  other topics. Among these are the real numbers, records and
		  overloading. Advanced techniques are described involving
		  induction and recursion. A whole chapter is devoted to an
		  extended example: the verification of a security protocol. },
  year		= 2002,
  acknowledgement={brucker, 2007-02-19},
  bibkey	= {nipkow.ea:isabelle:2002},
  tags		= {noTAG},
  clearance	= {unclassified},
  timestap	= {2008-05-26}
}

@Booklet{	  omg:ocl:1997,
  bibkey	= {omg:ocl:1997},
  key		= omg,
  abstract	= {This document introduces and defines the Object Constraint
		  Language (\acs{ocl}), a formal language to express side
		  effect-free constraints. Users of the Unified Modeling
		  Language and other languages can use \acs{ocl} to specify
		  constraints and other expressions attached to their models.
		  \acs{ocl} was used in the \acs{uml} Semantics document to
		  specify the well-formedness rules of the \acs{uml}
		  metamodel. Each well-formedness rule in the static
		  semantics sections in the \acs{uml} Semantics document
		  contains an \acs{ocl} expression, which is an invariant for
		  the involved class. The grammar for \acs{ocl} is specified
		  at the end of this document. A parser generated from this
		  grammar has correctly parsed all the constraints in the
		  \acs{uml} Semantics document, a process which improved the
		  correctness of the specifications for \acs{ocl} and \acs{uml}.},
  institution	= omg,
  language	= {USenglish},
  month		= sep,
  note		= {Available as \acs{omg} document
		  \href{http://www.omg.org/cgi-bin/doc?ad/97-08-08}
		  {ad/97-08-08}},
  keywords	= {\acs{uml}, OCL},
  topic		= {formalism},
  public	= {yes},
  title		= {Object Constraint Language Specification (Version 1.1)},
  year		= 1997,
  acknowledgement={brucker, 2007-04-23}
}

@Booklet{	  omg:ocl:2003,
  bibkey	= {omg:ocl:2003},
  key		= omg,
  abstract	= {This document introduces and defines the Object Constraint
		  Language (OCL), a formal language to express side
		  effect-free constraints. Users of the Unified Modeling
		  Language and other languages can use OCL to specify
		  constraints and other expressions attached to their models.
		  OCL was used in the \acs{uml} Semantics document to specify
		  the well-formedness rules of the \acs{uml} metamodel. Each
		  well-formedness rule in the static semantics sections in
		  the \acs{uml} Semantics document contains an OCL
		  expression, which is an invariant for the involved class.
		  The grammar for OCL is specified at the end of this
		  document. A parser generated from this grammar has
		  correctly parsed all the constraints in the \acs{uml}
		  Semantics document, a process which improved the
		  correctness of the specifications for OCL and \acs{uml}.},
  publisher	= omg,
  language	= {USenglish},
  month		= oct,
  keywords	= {\acs{uml}, OCL},
  topic		= {formalism},
  public	= {yes},
  note		= {Available as \acs{omg} document
		  \href{http://www.omg.org/cgi-bin/doc?ptc/03-10-14}
		  {ptc/03-10-14}},
  title		= {\acs{uml} 2.0 \acs{ocl} Specification},
  year		= 2003,
  acknowledgement={brucker, 2007-04-23}
}

@Booklet{	  omg:ocl:2006,
  bibkey	= {omg:ocl:2006},
  key		= omg,
  abstract	= {This document introduces and defines the Object Constraint
		  Language (OCL), a formal language to express side
		  effect-free constraints. Users of the Unified Modeling
		  Language and other languages can use OCL to specify
		  constraints and other expressions attached to their models.
		  OCL was used in the \acs{uml} Semantics document to specify
		  the well-formedness rules of the \acs{uml} metamodel. Each
		  well-formedness rule in the static semantics sections in
		  the \acs{uml} Semantics document contains an OCL
		  expression, which is an invariant for the involved class.
		  The grammar for OCL is specified at the end of this
		  document. A parser generated from this grammar has
		  correctly parsed all the constraints in the \acs{uml}
		  Semantics document, a process which improved the
		  correctness of the specifications for OCL and \acs{uml}.},
  publisher	= omg,
  language	= {USenglish},
  month		= apr,
  keywords	= {\acs{uml}, OCL},
  topic		= {formalism},
  note		= {Available as \acs{omg} document
		  \href{http://www.omg.org/cgi-bin/doc?formal/06-05-01}
		  {formal/06-05-01}},
  public	= {yes},
  title		= {\acs{uml} 2.0 \acs{ocl} Specification},
  year		= 2006,
  acknowledgement={brucker, 2007-04-23}
}

@Booklet{	  omg:ocl:2012,
  bibkey	= {omg:ocl:2012},
  key		= omg,
  abstract	= {This document introduces and defines the Object Constraint
		  Language (OCL), a formal language to express side
		  effect-free constraints. Users of the Unified Modeling
		  Language and other languages can use OCL to specify
		  constraints and other expressions attached to their models.
		  OCL was used in the \acs{uml} Semantics document to specify
		  the well-formedness rules of the \acs{uml} metamodel. Each
		  well-formedness rule in the static semantics sections in
		  the \acs{uml} Semantics document contains an OCL
		  expression, which is an invariant for the involved class.
		  The grammar for OCL is specified at the end of this
		  document. A parser generated from this grammar has
		  correctly parsed all the constraints in the \acs{uml}
		  Semantics document, a process which improved the
		  correctness of the specifications for OCL and \acs{uml}.},
  publisher	= omg,
  language	= {USenglish},
  month		= feb,
  keywords	= {\acs{uml}, OCL},
  topic		= {formalism},
  note		= {Available as \acs{omg} document
		  \href{http://www.omg.org/cgi-bin/doc?formal/2012-01-01}
		  {formal/2012-01-01}},
  public	= {yes},
  title		= {\acs{uml} 2.3.1 \acs{ocl} Specification},
  year		= 2012,
  acknowledgement={brucker, 2012-08-01}
}

@Booklet{	  omg:uml-infrastructure:2011,
  key		= omg,
  abstract	= {},
  publisher	= omg,
  language	= {USenglish},
  month		= aug,
  year		= 2011,
  note		= {Available as \acs{omg} document
		  \href{http://www.omg.org/cgi-bin/doc?formal/2011-08-05}
		  {formal/2011-08-05}},
  keywords	= {},
  topic		= {},
  public	= {yes},
  title		= {{UML} 2.4.1: Infrastructure Specification}
}

@Booklet{	  omg:uml-superstructure:2011,
  key		= omg,
  abstract	= {},
  publisher	= omg,
  language	= {USenglish},
  month		= aug,
  year		= 2011,
  note		= {Available as \acs{omg} document
		  \href{http://www.omg.org/cgi-bin/doc?formal/2011-08-06}
		  {formal/2011-08-06}},
  keywords	= {},
  topic		= {},
  public	= {yes},
  title		= {{UML} 2.4.1: Superstructure Specification}
}

@Proceedings{	  ramakrishnan.ea:tools:2008,
  editor	= {C. R. Ramakrishnan and Jakob Rehof},
  title		= {Tools and Algorithms for the Construction and Analysis of
		  Systems, 14th International Conference, TACAS 2008, Held as
		  Part of the Joint European Conferences on Theory and
		  Practice of Software, ETAPS 2008, Budapest, Hungary, March
		  29-April 6, 2008. Proceedings},
  booktitle	= {TACAS},
  publisher	= pub-springer,
  address	= pub-springer:adr,
  series	= s-lncs,
  volume	= 4963,
  year		= 2008,
  isbn		= {978-3-540-78799-0}
}

@PhDThesis{	  richters:precise:2002,
  author	= {Mark Richters},
  title		= {A Precise Approach to Validating {\acs{uml}} Models and
		  {\acs{ocl}} Constraints},
  school	= {Universit{\"a}t Bremen},
  year		= 2002,
  address	= {Logos Verlag, Berlin, \acs{biss} Monographs, No. 14},
  isbn		= {3-89722-842-4},
  abstract	= {We present a precise approach that allows an analysis and
		  validation of \acs{uml} models and OCL constraints. We
		  focus on models and constraints specified in the analysis
		  and early design stage of a software development process.
		  For this purpose, a suitable subset of \acs{uml}
		  corresponding to information that is usually represented in
		  class diagrams is identified and formally defined. This
		  basic modeling language provides a context for all OCL
		  constraints. We define a formal syntax and semantics of OCL
		  types, operations, expressions, invariants, and
		  pre-/postconditions. We also give solutions for problems
		  with the current OCL definition and discuss possible
		  extensions. A metamodel for OCL is introduced that defines
		  the abstract syntax of OCL expressions and the structure of
		  types and values. The metamodel approach allows a seamless
		  integration with the \acs{uml} metamodeling architecture
		  and makes the benefits of a precise OCL definition easier
		  accessible. The OCL metamodel also allows to define
		  context-sensitive conditions for well-formed OCL
		  expressions more precisely. These conditions can now be
		  specified with OCL whereas they previously were specified
		  only informally. In order to demonstrate the practical
		  applicability of our work, we have realized substantial
		  parts of it in a tool supporting the validation of models
		  and constraints. Design specifications can be ``executed''
		  and animated thus providing early feedback in an iterative
		  development process. Our approach offers novel ways for
		  checking user data against specifications, for automating
		  test procedures, and for checking CASE tools for standards
		  conformance. Therefore, this work contributes to the goal
		  of improving the overall quality of software systems by
		  combining theoretical and practical techniques.},
  acknowledgement={brucker, 2007-04-23}
}

@InProceedings{	  torlak.ea:kodkod:2007,
  author	= {Emina Torlak and Daniel Jackson},
  title		= {Kodkod: A Relational Model Finder},
  booktitle	= {TACAS},
  year		= 2007,
  pages		= {632--647},
  doi		= {10.1007/978-3-540-71209-1_49},
  crossref	= {grumberg.ea:tools:2007},
  abstract	= {The key design challenges in the construction of a
		  SAT-based relational model finder are described, and novel
		  techniques are proposed to address them. An efficient model
		  finder must have a mechanism for specifying partial
		  solutions, an effective symmetry detection and breaking
		  scheme, and an economical translation from relational to
		  boolean logic. These desiderata are addressed with three
		  new techniques: a symmetry detection algorithm that works
		  in the presence of partial solutions, a sparse-matrix
		  representation of relations, and a compact representation
		  of boolean formulas inspired by boolean expression diagrams
		  and reduced boolean circuits. The presented techniques have
		  been implemented and evaluated, with promising results.}
}

@InCollection{	  wenzel.ea:building:2007,
  abstract	= {We present the generic system framework of
		  Isabelle/Isarunderlying recent versions of Isabelle. Among
		  other things, Isar provides an infrastructure for Isabelle
		  plug-ins, comprising extensible state components and
		  extensible syntax that can be bound to tactical ML
		  programs. Thus the Isabelle/Isar architecture may be
		  understood as an extension and refinement of the
		  traditional LCF approach, with explicit infrastructure for
		  building derivative systems. To demonstrate the technical
		  potential of the framework, we apply it to a concrete
		  formalmethods tool: the HOL-Z 3.0 environment, which is
		  geared towards the analysis of Z specifications and formal
		  proof of forward-refinements.},
  author	= {Makarius Wenzel and Burkhart Wolff},
  booktitle	= {\acs{tphols} 2007},
  editor	= {Klaus Schneider and Jens Brandt},
  language	= {USenglish},
  acknowledgement={none},
  pages		= {352--367},
  publisher	= pub-springer,
  address	= pub-springer:adr,
  number	= 4732,
  series	= s-lncs,
  title		= {Building Formal Method Tools in the {Isabelle}/{Isar}
		  Framework},
  doi		= {10.1007/978-3-540-74591-4_26},
  year		= 2007
}

@PhDThesis{	  wenzel:isabelleisar:2002,
  author	= {Markus M. Wenzel},
  title		= {Isabelle/Isar --- a versatile environment for
		  human-readable formal proof documents},
  school	= {TU M{\"u}nchen},
  year		= 2002,
  url		= {http://tumb1.biblio.tu-muenchen.de/publ/diss/in/2002/wenzel.html}
		  ,
  abstract	= {The basic motivation of this work is to make formal theory
		  developments with machine-checked proofs accessible to a
		  broader audience. Our particular approach is centered
		  around the Isar formal proof language that is intended to
		  support adequate composition of proof documents that are
		  suitable for human consumption. Such primary proofs written
		  in Isar may be both checked by the machine and read by
		  human-beings; final presentation merely involves trivial
		  pretty printing of the sources. Sound logical foundations
		  of Isar are achieved by interpretation within the generic
		  Natural Deduction framework of Isabelle, reducing all
		  high-level reasoning steps to primitive inferences.
		  
		  The resulting Isabelle/Isar system is generic with respect
		  to object-logics and proof tools, just as pure Isabelle
		  itself. The full Isar language emerges from a small core by
		  means of several derived elements, which may be combined
		  freely with existing ones. This results in a very rich
		  space of expressions of formal reasoning, supporting many
		  viable proof techniques. The general paradigms of Natural
		  Deduction and Calculational Reasoning are both covered
		  particularly well. Concrete examples from logic,
		  mathematics, and computer-science demonstrate that the Isar
		  concepts are indeed sufficiently versatile to cover a broad
		  range of applications.},
  address	= {M{\"u}nchen},
  month		= feb,
  acknowledgement={none},
  bibkey	= {wenzel:isabelleisar:2002}
}

@Proceedings{	  wing.ea:world:1999,
  editor	= {Jeannette M. Wing and Jim Woodcock and Jim Davies},
  booktitle	= {World Congress on Formal Methods in the Development of
		  Computing Systems (FM)},
  title		= {World Congress on Formal Methods in the Development of
		  Computing Systems (FM)},
  publisher	= pub-springer,
  address	= pub-springer:adr,
  acknowledgement={brucker, 2007-04-23},
  series	= s-lncs,
  volume	= 1708,
  year		= 1999,
  isbn		= {3-540-66587-0}
}
