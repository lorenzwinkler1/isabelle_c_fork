@PREAMBLE{ {\providecommand{\ac}[1]{\textsc{#1}} } 
	 # {\providecommand{\acs}[1]{\textsc{#1}} } 
	 # {\providecommand{\acf}[1]{\textsc{#1}} } 
	 # {\providecommand{\TAP}{T\kern-.1em\lower-.5ex\hbox{A}\kern-.1em P} } 
	 # {\providecommand{\leanTAP}{\mbox{\sf lean\it\TAP}} } 
	 # {\providecommand{\holz}{\textsc{hol-z}} } 
	 # {\providecommand{\holocl}{\textsc{hol-ocl}} } 
	 # {\providecommand{\isbn}{\textsc{isbn}} } 
	 # {\providecommand{\Cpp}{C++} } 
	 # {\providecommand{\Specsharp}{Spec\#} } 
	 # {\providecommand{\doi}[1]{\href{http://dx.doi.org/#1}{doi:
	   {\urlstyle{rm}\nolinkurl{#1}}}}} }
@STRING{j-acta-informatica="Acta Informatica" }
@STRING{j-ar	= "Journal of Automated Reasoning" }
@STRING{omg	= {Object Management Group} }
@STRING{omg	= {Object Management Group} }
@STRING{pub-springer={Springer-Verlag} }
@STRING{pub-springer={Springer-Verlag} }
@STRING{pub-springer:adr={Heidelberg} }
@STRING{pub-springer:adr={Heidelberg} }
@STRING{s-lncs	= "Lecture Notes in Computer Science" }
@STRING{s-lncs	= "Lecture Notes in Computer Science" }

@InCollection{	  altenhofen.ea:issues:2010,
  author	= {Michael Altenhofen and Achim D. Brucker},
  booktitle	= {International Workshop on Formal Methods for Industrial
		  Critical Systems (\acs{fmics})},
  language	= {USenglish},
  talk		= {talk:brucker.ea:case:2003},
  title		= {Practical Issues with Formal Specifications: Lessons
		  Learned from an Industrial Case Study},
  year		= 2010,
  abstract	= {Many software companies still seem to be reluctant to use
		  formal specifications in their development processes.
		  Nevertheless, the trend towards implementing critical
		  business applications in distributed environments makes
		  such applications an attractive target for formal methods.
		  Additionally, the rising complexity also increases the
		  willingness of the development teams to apply formal
		  techniques. In this paper, we report on our experiences in
		  formally specifying several core components of one of our
		  commercially available products. While writing the formal
		  specification, we experienced several issues that had a
		  noticeable consequences on our work. While most of these
		  issues can be attributed to the specific method and tools
		  we have used, we do consider some of the problems as more
		  general, impeding the practical application of formal
		  methods, especially by non-experts, in large scale
		  industrial development.},
  keywords	= {\acs{asm}, industrial case study, formal specification},
  editor	= {Stefan Kowalewski and Marco Roveri},
  publisher	= pub-springer,
  doi		= {10.1007/978-3-642-15898-8_2},
  series	= s-lncs,
  number	= 6371,
  pages		= {17--32},
  pdf		= {http://www.brucker.ch/bibliography/download/2010/altenhofen.ea-issues-2010.pdf}
		  ,
  classification= {workshop},
  areas		= {formal methods},
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/altenhofen.ea-issues-2010}
		  
}

@Book{		  andrews:introduction:2002,
  author	= {Peter B. Andrews},
  title		= {Introduction to Mathematical Logic and Type Theory: To
		  Truth through Proof},
  year		= 2002,
  isbn		= {1-402-00763-9},
  edition	= {2nd},
  publisher	= pub-kluwer,
  address	= pub-kluwer:adr,
  acknowledgement={brucker, 2007-04-23},
  bibkey	= {andrews:introduction:2002}
}

@InProceedings{	  barnett.ea:spec:2004,
  author	= {Mike Barnett and K. Rustan M. Leino and Wolfram Schulte},
  abstract	= "Spec# is the latest in a long line of work on programming
		  languages and systems aimed at improving the development of
		  correct software. This paper describes the goals and
		  architecture of the Spec# programming system, consisting of
		  the object-oriented Spec# programming language, the Spec#
		  compiler, and the Boogie static program verifier. The
		  language includes constructs for writing specifications
		  that capture programmer intentions about how methods and
		  data are to be used, the compiler emits run-time checks to
		  enforce these specifications, and the verifier can check
		  the consistency between a program and its specifications.",
  language	= {USenglish},
  title		= {The {\Specsharp} programming system: An overview},
  pages		= {49--69},
  bibkey	= {barnett.ea:spec:2004},
  doi		= {10.1007/b105030},
  acknowledgement={brucker, 2007-02-19},
  month		= may # {~25}
}

@InProceedings{	  blanchette.ea:nitpick:2010,
  author	= {Jasmin Christian Blanchette and Tobias Nipkow},
  title		= {Nitpick: A Counterexample Generator for Higher-Order Logic
		  Based on a Relational Model Finder},
  booktitle	= {ITP},
  year		= 2010,
  pages		= {131--146},
  doi		= {10.1007/978-3-642-14052-5_11},
  crossref	= {kaufmann.ea:interactive:2010}
}

@InProceedings{	  braune.ea:service-oriented:2011,
  author	= {Stephan Braune and Achim D. Brucker and Gerald Kleser and
		  Keqin Li and Theo Dirk Meijler and Heiko Paulheim and
		  Florian Probst},
  title		= {A Service-Oriented Architecture for Emergency Management
		  Systems},
  booktitle	= {Software Engineering 2011 -- Workshopband},
  note		= {Innovative Systeme zur Unterst{\"u}tzung der zivilen
		  Sicherheit: Architekturen und Gestaltungskonzepte.},
  year		= 2011,
  editor	= {Ralf Reussner and Alexander Pretschner and Stefan
		  J{\"a}hnichen},
  classification= {workshop},
  month		= feb,
  areas		= {software},
  url		= {http://www.brucker.ch/bibliography/abstract/braune.ea-service-oriented-2011}
		  ,
  publisher	= {\acs{gi}},
  abstract	= {The complexity and openness of today's modern societies
		  result in the threat of serious cascading effects when
		  natural disasters or terrorist attacks strike. Thus, there
		  is a high demand for state of the art \acs{it} support in
		  the field of emergency management systems.
		  
		  In this paper, we identify the core requirements of future
		  emergency management systems and present a new generation
		  of modular, service-oriented and semantic-web-based
		  architecture for emergency management systems. Our
		  emergency management system offers innovative functionality
		  in the context of distributed information sources,
		  collaborative work environments, and consistent situation
		  pictures.},
  pdf		= {http://www.brucker.ch/bibliography/download/2011/braune.ea-service-oriented-2011.pdf}
		  ,
  series	= s-lni,
  isbn		= {978-3-88579-278-9},
  volume	= {\acs{p-184}},
  pages		= {225--232},
  public	= {yes}
}

@InCollection{	  brucker.ea:attribute-based:2010,
  author	= {Achim D. Brucker and Helmut Petritsch and Stefan G.
		  Weber},
  booktitle	= {Workshop In Information Security Theory And Practice
		  (\acs{wistp})},
  fullbooktitle	= {Information Security Theory and Practice. Security and
		  Privacy of Pervasive Systems and Smart Devices},
  language	= {USenglish},
  title		= {Attribute-based Encryption with Break-glass},
  year		= 2010,
  editor	= {Pierangela Samarati and Michael Tunstall and Joachim
		  Posegga},
  publisher	= pub-springer,
  series	= s-lncs,
  doi		= {10.1007/978-3-642-12368-9_18},
  number	= 6033,
  pages		= {237--244},
  abstract	= {Attribute-based Encryption (\acs{abe}) allows for
		  implementing fine-grained decentralized access control
		  based on properties or attributes a user has. Thus, there
		  is no need for writing detailed, user-based policies in
		  advance. This makes \acs{abe} in particular interesting for
		  implementing se- curity mechanisms in dynamic environments
		  such as ubiquitous comput- ing, disaster management, or
		  health-care. For supporting the latter two application
		  areas, common \acs{abe} approaches lack one important
		  feature: break-glass, i. e., the controlled overruling of
		  access control restrictions. In this paper we present an
		  integration of break-glass into an approach for end-to-end
		  secure information sharing using \acs{abe} techniques.},
  classification= {workshop},
  areas		= {security},
  pdf		= {http://www.brucker.ch/bibliography/download/2010/brucker.ea-attribute-based-2010.pdf}
		  ,
  public	= {yes},
  keywords	= {access control, break-glass, attribute-based encryption,
		  disaster management, trusted computing plattform},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-attribute-based-2010}
		  
}

@Article{	  brucker.ea:case:2003,
  author	= {Achim D. Brucker and Burkhart Wolff},
  title		= {A Case Study of a Formalized Security Architecture},
  journal	= j-entcs,
  volume	= 80,
  note		= {Proceedings of the Eighth International Workshop on Formal
		  Methods for Industrial Critical Systems (\acs{fmics}'03)},
  editor	= {Thomas Arts and Wan Fokkink},
  talk		= {talk:brucker.ea:case:2003},
  publisher	= pub-elsevier,
  location	= {R{\o}ros, Norway},
  year		= 2003,
  pages		= {24--40},
  language	= {USenglish},
  categories	= {security,cvsserver},
  classification= {workshop},
  areas		= {security, formal methods, software},
  keywords	= {security, access control, \acs{posix}, Unix, \acs{cvs}, Z},
  abstract	= {\acs{cvs} is a widely known version management system,
		  which can be used for the distributed development of
		  software as well as its distribution from a central
		  database. In this paper, we provide an outline of a formal
		  security analysis of a \acs{cvs-}Server architecture
		  performed in~\cite{brucker.ea:cvs-server:2002}. The
		  analysis is based on an abstract architecture (enforcing a
		  role-based access control on the repository), which is
		  refined to an implementation architecture (based on the
		  usual discretionary access control provided by the
		  \acs{posix} environment). Both architectures serve as
		  framework to formulate access control and confidentiality
		  properties. Both the abstract as well as the concrete
		  architecture are specified in the language Z. Based on a
		  logical embedding of Z into Isabelle/\acs{hol}, we provide
		  formal, machine-checked proofs for consistency properties
		  of the specification, for the correctness of the
		  refinement, and for some security properties. Thus, we
		  present a case study for the security analysis of realistic
		  models over an off-the-shelf system by formal
		  machine-checked proofs.},
  pdf		= {http://www.brucker.ch/bibliography/download/2003/brucker.ea-case-2003.pdf}
		  ,
  doi		= {10.1016/S1571-0661(04)80807-7},
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-case-2003}
		  
}

@TechReport{	  brucker.ea:checking:2001,
  author	= {Achim D. Brucker and Burkhart Wolff},
  institution	= {\ALUF},
  language	= {USenglish},
  month		= jul,
  title		= {Checking {\acs{ocl}} Constraints in Distributed Systems
		  Using {\acs{j2ee}/\acs{ejb}}},
  categories	= {testing,holocl},
  areas		= {software},
  classification= {unrefereed},
  abstract	= {We present a pragmatic approach using formal methods to
		  increase the quality of distributed component based
		  systems: Based on \acs{uml} class diagrams annotated with
		  \acs{ocl} constraints, code for runtime checking of
		  components in \acs{j2ee}/\acs{ejb} is automatically
		  generated. Thus, a \acs{uml--}model for a component can be
		  used in a black--box test for the component. Further we
		  introduce different design patterns for EJBs, which are
		  motivated by different levels of abstraction, and show that
		  these patterns work smoothly together with our \acs{ocl}
		  constraint checking. A prototypic implementation of the
		  code generator, supporting our design patterns with
		  \acs{ocl} support, has been integrated into a commercial
		  software development tool.},
  keywords	= {\acs{ocl}, Constraint checking, \acs{ejb}, \acs{j2ee},
		  Design by Contract, Design Pattern, Distributed Systems},
  year		= 2001,
  number	= 157,
  num_pages	= 46,
  contributions	= {Using \acs{ocl} Constrains in a \acs{ejb} environment and
		  Design Patterns for EJBs.},
  pdf		= {http://www.brucker.ch/bibliography/download/2001/tr01.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-checking-2001}
		  
}

@Misc{		  brucker.ea:control-flow:2013,
  author	= {Achim D. Brucker and Thomas Deuster},
  title		= {Improving Static Application Security Testing},
  year		= 2013,
  month		= 07,
  day		= 01,
  number	= {\acs{us} 13/832,388},
  note		= {\acs{us} 13/832,388},
  type		= {Patent Application},
  howpublished	= {Patent Application},
  version	= {\acs{a1}},
  assignee	= {\acs{sap} \acs{ag}},
  location	= {\acs{us}},
  nationality	= {\acs{us}},
  filing_num	= 120457,
  yearfiled	= 2013,
  monthfiled	= 07,
  dayfiled	= 01,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-control-flow-2013}
		  ,
  abstract	= {The integration of security analysis techniques into the
		  development process of new software, as well as the a
		  pplicability of these techniques to already existing
		  implementations, is one of the big challenges the softwar e
		  industry is currently facing. Some major goals of these
		  techniques are (amongst others): identifying trustfu l
		  service- or data-sources, reducing the
		  vulnerable/exploitable interfaces of stand-alone
		  implementations and distributed systems, and the definition
		  of security standards to make independent systems
		  comparable for analy sis.
		  
		  This thesis presents one algorithmic approach to find
		  security vulnerabilities, using static \mbox{analysis} t
		  echniques. This approach requires predefined
		  characteristics to identify data sources and sinks as
		  possibly ex ploitable. It starts by transforming the
		  analyzed source code into a standardized intermediate
		  representation and a corresponding flow graph. The
		  algorithm then uses this information to analyze any
		  exploitable data sinks , whether they have an exploitable
		  data source as predecessor in the graph, or not. Each found
		  source-sink pai r is identified as a vulnerability.
		  
		  Since the simple identification of the source-sink pairs
		  neither take control flow information, nor data flow paths
		  into account, these pairs are not automatically exploitable
		  within every context. The next steps of the algorithm
		  analyze different exclusion criteria, to test, if these
		  source-sink pairs are exploitable in at leas t one possible
		  context. In case they are not exploitable, they are no
		  longer identified as vulnerabilities. },
  classification= {pending},
  areas		= {security},
  public	= {no}
}

@InCollection{	  brucker.ea:cvs-server:2002,
  author	= {Achim D. Brucker and Frank Rittinger and Burkhart Wolff},
  categories	= {security,cvsserver},
  classification= {workshop},
  areas		= {security, formal methods, software},
  title		= {The {\acs{cvs}}-Server Case Study: {A} Formalized Security
		  Architecture},
  editor	= {Dominik Haneberg and Gerhard Schellhorn and Wolfgang
		  Reif},
  booktitle	= {\acs{fm-tools} 2002},
  year		= 2002,
  pages		= {47--52},
  month		= jul,
  organization	= {University Augsburg},
  pdf		= {http://www.brucker.ch/bibliography/download/2002/brucker.ea-cvs-server-2002.pdf}
		  ,
  language	= {USenglish},
  abstract	= {\acs{cvs} is a widely known version management system.
		  Configured in server mode, it can be used for the
		  distributed development of software as well as its
		  distribution from a central database called the
		  \emph{repository}. In this setting, a number of security
		  mechanisms have to be integrated into the \acs{cvs-}server
		  architecture. We present an abstract formal model of the
		  access control aspects of a \acs{cvs-}server architecture
		  enforcing a role-based access control on the data in the
		  repository. This abstract architecture is refined to an
		  implementation architecture, which represents (an
		  abstraction of) a concrete \acs{cvs-}server configuration
		  running in a \acs{posix}/\acs{unix} environment. Both the
		  abstract as well as the concrete architecture are specified
		  in the language Z. The specification is compiled to \holz,
		  such that refinement proofs for this case study can be done
		  in Isabelle/\acs{hol}.},
  project	= {\acs{fsa}},
  note		= {Available as Technical Report, University Augsburg, number
		  2002--11.},
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-cvs-server-2002}
		  
}

@TechReport{	  brucker.ea:cvs-server:2002-b,
  author	= {Achim D. Brucker and Frank Rittinger and Burkhart Wolff},
  institution	= {\ALUF},
  language	= {USenglish},
  number	= 182,
  categories	= {security},
  classification= {unrefereed},
  areas		= {security, formal methods, software},
  title		= {A {\acs{cvs-}Server} Security Architecture --- Concepts
		  and Formal Analysis},
  abstract	= {We present a secure architecture of a \acs{cvs-}server,
		  its implementation (i.e. mainly its configuration) and its
		  formal analysis. Our \acs{cvs-}server is uses cvsauth, that
		  provides protection of passwords and protection of some
		  internal data of the \acs{cvs} repository. In contrast to
		  other (security oriented) \acs{cvs-}architectures, our
		  approach allows the \acs{cvs-}server run on an open
		  filesystem, i.e. a filesystem where users can have direct
		  access both by \acs{cvs-}commands and by standard
		  \acs{unix}/\acs{posix} commands such as \texttt{mv}. For
		  our secure architecture of the \acs{cvs-}server, we provide
		  a formal specification and security analysys. The latter is
		  based on a refinement mapping high-level security
		  requirements on the architecture on low-level security
		  mechanisms on the \acs{unix}/\acs{posix} filesystem level.
		  The purpose of the formal analysis of the secure
		  \acs{cvs-}server architecture is twofold: First, it is the
		  bases for the specification of mutual security properties
		  such as non-repudiation, authentication and access control
		  for this architecture. Second, the mapping of the
		  architecture on standard security implementation technology
		  is described. Thus, our approach can be seen as a method to
		  give a formal underpinning for the usually tricky business
		  of system administrators.},
  keywords	= {security architecture, Concurrent Versions System
		  (\acs{cvs}), Z, formal methods, refinement},
  year		= 2002,
  num_pages	= 100,
  pdf		= {http://www.brucker.ch/bibliography/download/2002/cvs_arch.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-cvs-server-2002-b}
		  
}

@Misc{		  brucker.ea:delegation-patent:2009,
  author	= {Achim D. Brucker and Helmut Petritsch},
  title		= {System and Method for Providing Delegation Assistance},
  year		= 2013,
  month		= 06,
  day		= 25,
  publishedyear	= 2010,
  publishedmonth= 12,
  publishedday	= 30,
  number	= {\acs{us} 8473505},
  note		= {\acs{us} 8473505},
  filing_number	= {\acs{us} 2010/0332504 \acs{a1}},
  filing_note	= {\acs{us} 2010/0332504 \acs{a1}},
  type		= {Patent},
  howpublished	= {Patent},
  version	= {\acs{a1}},
  assignee	= {\acs{sap} \acs{ag}},
  location	= {\acs{us}},
  nationality	= {\acs{us}},
  filing_num	= 12494763,
  patent_num	= 8473505,
  yearfiled	= 2009,
  monthfiled	= 06,
  dayfiled	= 30,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-delegation-patent-2009}
		  ,
  ipc_class	= {\acs{g06f} 17/30},
  us_class	= {707713; 707759; 707769},
  abstract	= {The embodiments described herein provide various
		  techniques for providing delegation assistance. Upon a
		  request for delegation assistance, data from information
		  sources are retrieved. Relationships are automatically
		  identified relative to a requesting user based on the data
		  from the information sources. The relationships are
		  automatically ranked, and results of the ranking are
		  provided to the requesting user. The user may then trigger
		  delegation resolution based in part on the results of the
		  ranking.},
  classification= {patent},
  areas		= {security},
  public	= {no}
}

@InProceedings{	  brucker.ea:delegation:2009,
  author	= {Achim D. Brucker and Helmut Petritsch and Andreas Schaad},
  title		= {Delegation Assistance},
  booktitle	= conf-policy,
  categories	= {security},
  year		= 2009,
  month		= jul,
  classification= {conference},
  areas		= {security},
  keywords	= {delegation and revocation, policy enforcement, security
		  services, security architecture},
  publisher	= pub-ieee,
  abstract	= {Today's \acs{it} systems typically comprise a fine-grained
		  access control mechanism based on complex policies. The
		  strict enforcement of these policies, at runtime, always
		  contains the risk of hindering people in their regular
		  work. An efficient support for assisted delegation can help
		  in resolving the conflict between too tight access control
		  and the required flexibility as well as support the
		  resolution of conflicts. Here, assisted delegation means
		  that, additional to denying the access, a user is informed
		  about a list of users that could either grant him access to
		  the requested resource or which could execute this task in
		  behalf of the user. In this paper, we present an approach
		  for determining a set of users which are able to resolve an
		  access control conflict. This set is based on various
		  information sources and are ordered with respect to
		  different distance functions. We show that one distance
		  function can be used to serve different types of contextual
		  input, e. g., role hierarchies, geospatial information as
		  well as shared business object structure data or social
		  network graphs.},
  pdf		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-delegation-2009.pdf}
		  ,
  doi		= {10.1109/POLICY.2009.35},
  pages		= {84--91},
  isbn		= {978-0-7695-3742-9},
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-delegation-2009}
		  
}

@Misc{		  brucker.ea:efficient-patent:2010,
  author	= {Achim D. Brucker and Helmut Petritsch},
  title		= {Prefetch of Attributes in Evaluating Access Control
		  Requests},
  year		= 2011,
  month		= 12,
  day		= 22,
  number	= {\acs{us} 2011/0314261 \acs{a1}},
  note		= {\acs{us} 2011/0314261 \acs{a1}},
  type		= {Patent Application},
  howpublished	= {Patent Application},
  version	= {\acs{a1}},
  assignee	= {\acs{sap} \acs{ag}},
  location	= {\acs{us}},
  nationality	= {\acs{us}},
  filing_num	= 12817948,
  yearfiled	= 2010,
  monthfiled	= 06,
  dayfiled	= 17,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-efficient-patent-2010}
		  ,
  ipc_class	= {\acs{g06f} 9/30; \acs{h04l} 9/32},
  us_class	= {712207; 7261; 712E09055; 726 1},
  abstract	= {In an embodiment, a method is provided for prefetching
		  attributes used in access control evaluation. In this
		  method, an access control policy that comprises rules is
		  retrieved. These rules further comprise parameters. At
		  least one of the rules is categorized into a class from
		  multiple classes based on at least one of the parameters.
		  Here, the class is a grouping based on at least one of
		  these parameters. An attribute associated with the at least
		  one of these parameters is identified and this attribute is
		  mapped to the class.},
  classification= {pending},
  areas		= {security},
  public	= {no}
}

@InCollection{	  brucker.ea:efficient:2010,
  author	= {Achim D. Brucker and Helmut Petritsch},
  booktitle	= {International Symposium on Engineering Secure Software and
		  Systems (ESSoS)},
  language	= {USenglish},
  editor	= {F. Massacci and D. Wallach and N. Zannone},
  publisher	= pub-springer,
  series	= s-lncs,
  title		= {Idea: Efficient Evaluation of Access Control Constraints},
  year		= 2010,
  pages		= {157--165},
  number	= 5965,
  doi		= {10.1007/978-3-642-11747-3_12},
  isbn		= {978-3-642-11746-6},
  classification= {conference},
  areas		= {security, software},
  public	= {yes},
  abstract	= {Business requirements for modern enterprise systems
		  usually comprise a variety of dynamic constraints, i.e.,
		  constraints that require a complex set of context
		  information only available at runtime. Thus, the efficient
		  evaluation of dynamic constraints, e.g., expressing
		  separation of duties requirements, becomes an important
		  factor for the overall performance of the access control
		  enforcement.
		  
		  Especially in highly distributed systems, e.g., systems
		  based on the service-oriented architecture (\acs{soa})
		  paradigm, the time for evaluating access control
		  constraints depends significantly on the protocol between
		  the central policy decision point (\acs{pdp}) and the
		  distributed policy enforcement points (\acs{pep}).
		  
		  In this paper, we present an policy-driven approach for
		  generating customized protocol for the communication
		  between the \acs{pdp} and the pep. Moreover, we provide a
		  detailed comparison of several approaches for querying
		  context information during the evaluation of access control
		  constraints.},
  keywords	= {distributed policy enforcement, \acs{xacml}, access
		  control},
  pdf		= {http://www.brucker.ch/bibliography/download/2010/brucker.ea-efficient-2010.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-efficient-2010}
		  
}

@InCollection{	  brucker.ea:embedding:2003,
  abstract	= {Tools for a specification language can be implemented
		  \emph{directly} (by building a special purpose theorem
		  prover) or \emph{by a conservative embedding} into a typed
		  meta-logic, which allows their safe and logically
		  consistent implementation and the reuse of existing theorem
		  prover engines. For being useful, the conservative
		  extension approach must provide derivations for several
		  thousand ``folklore'' theorems. In this paper, we present
		  an approach for deriving the mass of these theorems
		  mechanically from an existing library of the meta-logic.
		  The approach presupposes a structured \emph{theory
		  morphism} mapping library datatypes and library functions
		  to new functions of the specification language while
		  uniformly modifying some semantic properties; for example,
		  new functions may have a different treatment of
		  undefinedness compared to old ones.},
  keywords	= {Formal Methods, Formal Semantics, Shallow Embeddings,
		  Theorem Proving, \acs{ocl}},
  location	= {Nijmegen},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {Types for Proof and Programs},
  language	= {USenglish},
  pages		= {59--77},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 2646,
  isbn		= {3-540-14031-X},
  editor	= {Herman Geuvers and Freek Wiedijk},
  pdf		= {http://www.brucker.ch/bibliography/download/2003/brucker.ea-embedding-2003.pdf}
		  ,
  project	= {\acs{csfmdos}},
  title		= {Using Theory Morphisms for Implementing Formal Methods
		  Tools},
  doi		= {10.1007/3-540-39185-1_4},
  issn		= {0302-9743},
  categories	= {holocl},
  classification= {workshop},
  areas		= {formal methods},
  year		= 2003,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-embedding-2003}
		  
}

@InCollection{	  brucker.ea:extending:2009,
  author	= {Achim D. Brucker and Helmut Petritsch},
  title		= {Extending Access Control Models with Break-glass},
  booktitle	= conf-sacmat,
  year		= 2009,
  talk		= {talk:brucker.ea:extending:2009},
  isbn		= {978-1-60558-537-6},
  pages		= {197--206},
  publisher	= pub-acm,
  editor	= {Barbara Carminati and James Joshi},
  location	= {Stresa, Italy},
  doi		= {10.1145/1542207.1542239},
  abstract	= {Access control models are usually static, i.e.,
		  permissions are granted based on a policy that only changes
		  seldom. Especially for scenarios in health care and
		  disaster management, a more flexible support of access
		  control, i.e., the underlying policy, is needed.
		  
		  Break-glass is one approach for such a flexible support of
		  policies which helps to prevent system stagnation that
		  could harm lives or otherwise result in losses. Today,
		  break-glass techniques are usually added on top of standard
		  access control solutions in an ad-hoc manner and,
		  therefore, lack an integration into the underlying access
		  control paradigm and the systems' access control
		  enforcement architecture.
		  
		  We present an approach for integrating, in a fine-grained
		  manner, break-glass strategies into standard access control
		  models and their accompanying enforcement architecture.
		  This integration provides means for specifying break-glass
		  policies precisely and supporting model-driven development
		  techniques based on such policies.},
  categories	= {security},
  copyright	= {\acs{acm}},
  copyrighturl	= {http://dl.acm.org/authorize?175073},
  classification= {conference},
  areas		= {security, software},
  keywords	= {disaster management, access-control, break-glass,
		  model-driven security},
  pdf		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-extending-2009.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-extending-2009}
		  
}

@InCollection{	  brucker.ea:extensible:2008,
  abstract	= {We present a datatype package that enables the shallow
		  embedding technique to object-oriented specification and
		  programming languages. The package incrementally compiles
		  an object-oriented data model to a theory containing
		  object-universes, constructors, and accessors functions,
		  coercions between dynamic and static types, characteristic
		  sets, their relations reflecting inheritance, and the
		  necessary class invariants. The package is conservative,
		  i.e., all properties are derived entirely from axiomatic
		  definitions. As an application, we use the package for an
		  object-oriented core-language called \impoo, for which
		  correctness of a Hoare-Logic with respect to an operational
		  semantics is proven. },
  location	= {Paphos, Cyprus},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {\acs{ecoop} 2008 -- Object-Oriented Programming},
  language	= {USenglish},
  publisher	= pub-springer,
  series	= s-lncs,
  doi		= {10.1007/978-3-540-70592-5_19},
  title		= {Extensible Universes for Object-oriented Data Models},
  categories	= {holocl},
  number	= 5142,
  pages		= {438--462},
  classification= {conference},
  areas		= {formal methods, software},
  keywords	= {object-oriented data models, \acs{hol}, formal methods,
		  \acs{uml}, \acs{ocl}},
  year		= 2008,
  editor	= {Jan Vitek},
  pdf		= {http://www.brucker.ch/bibliography/download/2008/brucker.ea-extensible-2008.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-extensible-2008}
		  
}

@Article{	  brucker.ea:extensible:2008-b,
  abstract	= {We present an extensible encoding of object-oriented data
		  models into \acs{hol}. Our encoding is supported by a
		  datatype package that leverages the use of the shallow
		  embedding technique to object-oriented specification and
		  programming languages. The package incrementally compiles
		  an object-oriented data model, i.e., a class model, to a
		  theory containing object-universes, constructors, accessor
		  functions, coercions (casts) between dynamic and static
		  types, characteristic sets, and co-inductive class
		  invariants. The package is conservative, i.e., all
		  properties are derived entirely from constant definitions,
		  including the constraints over object structures. As an
		  application, we use the package for an object-oriented
		  core-language called \impoo, for which we formally prove
		  the correctness of a Hoare-Logic with respect to a
		  denotational semantics.},
  author	= {Achim D. Brucker and Burkhart Wolff},
  language	= {USenglish},
  public	= {yes},
  classification= {journal},
  areas		= {formal methods, software},
  keywords	= {object-oriented data models, \acs{hol}, theorem proving,
		  verification},
  title		= {An Extensible Encoding of Object-oriented Data Models in
		  \acs{hol}},
  year		= 2008,
  journal	= j-ar,
  volume	= 41,
  issue		= 3,
  pages		= {219--249},
  issn		= {0168-7433},
  doi		= {10.1007/s10817-008-9108-3},
  categories	= {holocl},
  publisher	= pub-springer,
  pdf		= {http://www.brucker.ch/bibliography/download/2008/brucker.ea-extensible-2008-b.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-extensible-2008-b}
		  
}

###Article{	  brucker.ea:extensible:2008-b,
  abstract	= {We present an extensible encoding of object-oriented data
		  models into \acs{hol}. Our encoding is supported by a
		  datatype package that leverages the use of the shallow
		  embedding technique to object-oriented specification and
		  programming languages. The package incrementally compiles
		  an object-oriented data model, i.e., a class model, to a
		  theory containing object-universes, constructors, accessor
		  functions, coercions (casts) between dynamic and static
		  types, characteristic sets, and co-inductive class
		  invariants. The package is conservative, i.e., all
		  properties are derived entirely from constant definitions,
		  including the constraints over object structures. As an
		  application, we use the package for an object-oriented
		  core-language called \impoo, for which we formally prove
		  the correctness of a Hoare-Logic with respect to a
		  denotational semantics.},
  author	= {Achim D. Brucker and Burkhart Wolff},
  language	= {USenglish},
  public	= {yes},
  classification= {journal},
  areas		= {formal methods, software},
  keywords	= {object-oriented data models, \acs{hol}, theorem proving,
		  verification},
  title		= {An Extensible Encoding of Object-oriented Data Models in
		  \acs{hol}},
  year		= 2008,
  journal	= j-ar,
  volume	= 41,
  issue		= 3,
  pages		= {219--249},
  issn		= {0168-7433},
  doi		= {10.1007/s10817-008-9108-3},
  categories	= {holocl},
  publisher	= pub-springer,
  pdf		= {http://www.brucker.ch/bibliography/download/2008/brucker.ea-extensible-2008-b.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-extensible-2008-b}
		  
}

@InProceedings{	  brucker.ea:featherweight:2012,
  abstract	= {At its origins, OCL was conceived as a strict semantics
		  for undefinedness, with the exception of the logical
		  connectives of type Boolean that constitute a three-valued
		  propositional logic. Recent versions of the OCL standard
		  added a second exception element, which, similar to the
		  null references in object-oriented programming languages,
		  is given a non-strict semantics.\\\\In this paper, we
		  report on our results in formalizing the core of OCL in
		  HOL. This formalization revealed several inconsistencies
		  and contradictions in the current version of the OCL
		  standard. These inconsistencies and contradictions are
		  reflected in the challenge to define and implement
		  interpreters, code-generators, specification animators and
		  theorem provers for OCL in a uniform manner and resulting
		  incompatibilities of various tools.},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {Workshop on OCL and Textual Modelling (OCL 2012)},
  title		= {Featherweight OCL: A study for the consistent semantics of
		  OCL 2.3 in HOL},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-featherweight-2012}
		  ,
  year		= {2012}
}

###InProceedings{ brucker.ea:featherweight:2012,
  author	= {Achim D. Brucker and Burkhart Wolff},
  title		= {Featherweight \acs{ocl}: A study for the consistent
		  semantics of \acs{ocl} 2.3 in \acs{hol}},
  booktitle	= {Workshop on \acs{ocl} and Textual Modelling (\acs{ocl}
		  2012)},
  year		= 2012,
  abstract	= {At its origins, \acs{ocl} was conceived as a strict
		  semantics for undefinedness, with the exception of the
		  logical connectives of type Boolean that constitute a
		  three-valued propositional logic. Recent versions of the
		  \acs{ocl} standard added a second exception element, which,
		  similar to the null references in programming languages, is
		  given a non-strict semantics.
		  
		  In this paper, we report on our results in formalizing the
		  core of \acs{ocl} in higher-order logic (\acs{hol}). This
		  formalization revealed several inconsistencies and
		  contradictions in the current version of the \acs{ocl}
		  standard. These inconsistencies and contradictions are
		  reflected in the challenge to define and implement
		  \acs{ocl} tools (e.g., interpreters, code-generators, or
		  theorem provers) in a uniform manner. },
  note		= {The semantics for the Boolean operators proposed in this
		  paper was adopted by the \acs{ocl} 2.4 standard.},
  classification= {workshop},
  categories	= {holocl},
  isbn		= {978-1-4503-1799-3},
  doi		= {10.1145/2428516.2428520},
  pages		= {19--24},
  areas		= {formal methods, software},
  keywords	= {\acs{ocl}, \holocl, formal semantics},
  public	= {yes},
  talk		= {talk:brucker.ea:featherweight:2012},
  pdf		= {http://www.brucker.ch/bibliography/download/2012/brucker.ea-featherweight-2012.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-featherweight-2012}
		  
}

@InCollection{	  brucker.ea:firewall:2010,
  author	= {Achim D. Brucker and Lukas Br{\"u}gger and Paul Kearney
		  and Burkhart Wolff},
  booktitle	= {Third International Conference on Software Testing,
		  Verification, and Validation (\acs{icst})},
  language	= {USenglish},
  title		= {Verified Firewall Policy Transformations for Test-Case
		  Generation},
  year		= 2010,
  publisher	= pub-ieee,
  categories	= {holtestgen},
  classification= {conference},
  areas		= {security, formal methods},
  public	= {yes},
  isbn		= {978-0-7695-3990-4},
  location	= {Paris, France},
  pages		= {345--354},
  doi		= {10.1109/ICST.2010.50},
  abstract	= {We present an optimization technique for model-based
		  generation of test cases for firewalls. Based on a formal
		  model for firewall policies in higher-order logic, we
		  derive a collection of semantics-preserving policy
		  transformation rules and an algorithm that optimizes the
		  specification with respect of the number of test cases
		  required for path coverage. The correctness of the rules
		  and the algorithm is established by formal proofs in
		  Isabelle/\acs{hol}. Finally, we use the normalized policies
		  to generate test cases with the domain-specific firewall
		  testing tool \testgen/\acs{fw}.
		  
		  The resulting procedure is characterized by a gain in
		  efficiency of two orders of magnitude and can handle
		  configurations with hundreds of rules as occur in practice.
		  
		  Our approach can be seen as an instance of a methodology to
		  tame inherent state-space explosions in test case
		  generation for security policies.},
  keywords	= {security testing, model-based testing},
  pdf		= {http://www.brucker.ch/bibliography/download/2010/brucker.ea-firewall-2010.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-firewall-2010}
		  
}

@Article{	  brucker.ea:formal-fw-testing:2014,
  author	= {Achim D. Brucker and Lukas Br{\"u}gger and Burkhart Wolff},
  journal	= j-stvr,
  publisher	= pub-wiley,
  language	= {USenglish},
  categories	= {holtestgen},
  title		= {Formal Firewall Testing: An Exercise in Test and Proof},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-formal-fw-testing-2014}
		  ,
  year		= 2014,
  classification= journal,
  areas		= {formal methods, software},
  public	= {no},
  note		= {Accepted for publication.}
}

@InProceedings{	  brucker.ea:framework:2011,
  author	= {Achim D. Brucker and Helmut Petritsch},
  title		= {A Framework for Managing and Analyzing Changes of Security
		  Policies},
  booktitle	= conf-policy,
  classification= {conference},
  areas		= {security},
  year		= 2011,
  month		= jun,
  abstract	= {Modern enterprise systems need to comply to complex
		  security policies. Due to legal regulations such as Basel
		  \acs{ii} or \acs{hipaa}, the enforcement of these security
		  policies needs to be carefully monitored and analyzed. The
		  monitoring of complex and often dynamic access control
		  requirements results in a vast amount of information that
		  needs to be analyzed both in case of incidents and during
		  regular audits.
		  
		  We present an extensible framework for managing and
		  analyzing security policies during their whole life cycle.
		  Our framework integrates versioning of policies and
		  logfiles with policy animation, static analysis, and
		  debugging techniques. For example, this combination allows
		  for comparing different versions of security policies or
		  the replaying and animation of system traces based on
		  logfiles.},
  publisher	= pub-ieee,
  keywords	= {security policies, versioning, runtime monitoring},
  pdf		= {http://www.brucker.ch/bibliography/download/2011/brucker.ea-framework-2011.pdf}
		  ,
  doi		= {10.1109/POLICY.2011.47},
  pages		= {105--112},
  isbn		= {978-0-7695-4330-7/11},
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-framework-2011}
		  
}

@InCollection{	  brucker.ea:framework:2013,
  abstract	= {Modern applications are inherently heterogeneous: they are
		  built by composing loosely coupled services that are,
		  usually, offered and operated by different service
		  providers. While this approach increases the flexibility of
		  the composed applications, it makes the implementation of
		  security and trustworthiness requirements much more
		  difficult. As the requirements for security and
		  trustworthiness, in nearly all sectors, are increasing
		  dramatically, there is a need for new approaches that
		  integrate security requirements right from the beginning
		  while composing service-based applications.
		  
		  In this paper, we present a framework for secure service
		  composition using a model-based approach for specifying,
		  building, and executing composed services. As a unique
		  feature, this framework integrates security requirements as
		  a first class citizen and, thus, avoids the ``security as
		  an afterthought'' paradigm.},
  keywords	= {secure service composition, \acs{bpmn}, service modelling,
		  service availability},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-framework-2013}
		  ,
  author	= {Achim D. Brucker and Francesco Malmignati and Madjid
		  Merabti and Qi Shi and Bo Zhou},
  booktitle	= {\acs{ase}/\acs{ieee} International Conference on
		  Information Privacy, Security, Risk and Trust (\acs{passat})},
  language	= {USenglish},
  publisher	= pub-ieee,
  title		= {A Framework for Secure Service Composition},
  classification= {conference},
  areas		= {security},
  public	= {yes},
  year		= 2013,
  pdf		= {http://www.brucker.ch/bibliography/download/2013/brucker.ea-framework-2013.pdf}
		  ,
  talk		= {talk:brucker.ea:framework:2013}
}

@TechReport{	  brucker.ea:hol-ocl-book:2006,
  abstract	= {HOL-OCL is an interactive proof environment for the Object
		  Constraint Language (OCL). It is implemented as a shallow
		  embedding of OCL into the Higher-order Logic (HOL) instance
		  of the interactive theorem prover Isabelle. HOL-OCL defines
		  a machine-checked formalization of the semantics as
		  described in the standard for OCL 2.0. This conservative,
		  shallow embedding of UML/OCL into Isabelle/HOL includes
		  support for typed, extensible UML data models supporting
		  inheritance and subtyping inside the typed lambda-calculus
		  with parametric polymorphism. As a consequence of
		  conservativity with respect to higher-order logic (HOL), we
		  can guarantee the consistency of the semantic model.
		  Moreover, HOL-OCL provides several derived calculi for
		  UML/OCL that allow for formal derivations establishing the
		  validity of UML/OCL formulae. Elementary automated support
		  for such proofs is also provided top},
  author	= {Achim D. Brucker and Burkhart Wolff},
  bibkey	= {brucker.ea:hol-ocl-book:2006},
  institution	= {ETH Zurich},
  keywords	= {security, SecureUML, UML, OCL, HOL-OCL,
		  model-transformation},
  language	= {USenglish},
  number	= {525},
  pdf		= {http://www.brucker.ch/bibliography/download/2006/brucker.ea-hol-ocl-book-2006.pdf}
		  ,
  title		= {The {HOL-OCL} Book},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-ocl-book-2006}
		  ,
  year		= {2006}
}

###TechReport{	  brucker.ea:hol-ocl-book:2006,
  author	= {Achim D. Brucker and Burkhart Wolff},
  institution	= {\acs{eth} Zurich},
  language	= {USenglish},
  title		= {The {\holocl} Book},
  classification= {unrefereed},
  areas		= {formal methods, software},
  categories	= {holocl},
  year		= 2006,
  number	= 525,
  abstract	= {\holocl is an interactive proof environment for the Object
		  Constraint Language (\acs{ocl}). It is implemented as a
		  shallow embedding of \acs{ocl} into the Higher-order Logic
		  (\acs{hol}) instance of the interactive theorem prover
		  Isabelle. \holocl defines a machine-checked formalization
		  of the semantics as described in the standard for \acs{ocl}
		  2.0. This conservative, shallow embedding of
		  \acs{uml}/\acs{ocl} into Isabelle/\acs{hol} includes
		  support for typed, extensible \acs{uml} data models
		  supporting inheritance and subtyping inside the typed
		  lambda-calculus with parametric polymorphism. As a
		  consequence of conservativity with respect to higher-order
		  logic (\acs{hol}), we can guarantee the consistency of the
		  semantic model. Moreover, \holocl provides several derived
		  calculi for \acs{uml}/\acs{ocl} that allow for formal
		  derivations establishing the validity of
		  \acs{uml}/\acs{ocl} formulae. Elementary automated support
		  for such proofs is also provided top },
  bibkey	= {brucker.ea:hol-ocl-book:2006},
  pdf		= {http://www.brucker.ch/bibliography/download/2006/brucker.ea-hol-ocl-book-2006.pdf}
		  ,
  keywords	= {security, SecureUML, \acs{uml}, \acs{ocl}, \holocl,
		  model-transformation},
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-ocl-book-2006}
		  
}

@InCollection{	  brucker.ea:hol-ocl:2002,
  abstract	= {Based on experiences gained from an embedding of the
		  Object Constraint Language (\acs{ocl}) in higher-order
		  logic~\cite{brucker.ea:proposal:2002}, we explore several
		  key issues of the design of a formal semantics of the
		  \acs{ocl}. These issues comprise the question of the
		  interpretation of invariants, pre- and postconditions,
		  their transformation, an executable sub-language and the
		  possibilities of refinement notions. A particular emphasize
		  is put on the issue of mechanized deduction in
		  \acs{uml}/\acs{ocl} specification.},
  keywords	= {\acs{ocl}, Formal semantics, Constraint languages,
		  Refinement, higher-order logic},
  location	= {Dresden},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {\acs{uml} 2002: Model Engineering, Concepts and Tools},
  language	= {USenglish},
  talk		= {talk:brucker.ea:hol-ocl:2002},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 2460,
  pages		= {196--211},
  editor	= {Jean-Marc J{\'e}z{\'e}quel and Heinrich Hussmann and
		  Stephen Cook},
  pdf		= {http://www.brucker.ch/bibliography/download/2002/brucker.ea-hol-ocl-2002.pdf}
		  ,
  project	= {\acs{csfmdos}},
  title		= {{\holocl}: Experiences, Consequences and Design Choices},
  categories	= {holocl},
  doi		= {10.1007/3-540-45800-X_17},
  classification= {conference},
  areas		= {formal methods, software},
  isbn		= {3-540-44254-5},
  issn		= {0302-9743},
  year		= 2002,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-ocl-2002}
		  
}

@InCollection{	  brucker.ea:hol-ocl:2008,
  abstract	= {We present the theorem proving environment \holocl that is
		  integrated in a \acs{mde} framework. \holocl allows to
		  reason over UMLclass models annotated with \acs{ocl}
		  specifications. Thus, \holocl strengthens a crucial part of
		  the \acs{uml} to an object-oriented formal method. \holocl
		  provides several derived proof calculi that allow for
		  formal derivations establishing the validity of
		  \acs{uml}/\acs{ocl} formulae. These formulae arise
		  naturally when checking the consistency of class models,
		  when formally refining abstract models to more concrete
		  ones or when discharging side-conditions from
		  model-transformations.},
  keywords	= {\holocl, \acs{uml}, \acs{ocl}, Formal Methods, Theorem
		  Proving, Refinement},
  location	= {Budapest, Hungary},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {Fundamental Approaches to Software Engineering
		  {(\acs{fase08})}},
  language	= {USenglish},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 4961,
  doi		= {10.1007/978-3-540-78743-3_8},
  pages		= {97--100},
  editor	= {Jos{\'e} Fiadeiro and Paola Inverardi},
  title		= {{\holocl} -- {A Formal Proof Environment for
		  {\acs{uml}}/{\acs{ocl}}}},
  categories	= {holocl},
  classification= {conference},
  areas		= {formal methods, software},
  year		= 2008,
  pdf		= {http://www.brucker.ch/bibliography/download/2008/brucker.ea-hol-ocl-2008.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-ocl-2008}
		  
}

###InCollection{  brucker.ea:hol-ocl:2008,
  abstract	= {We present the theorem proving environment \holocl that is
		  integrated in a \acs{mde} framework. \holocl allows to
		  reason over UMLclass models annotated with \acs{ocl}
		  specifications. Thus, \holocl strengthens a crucial part of
		  the \acs{uml} to an object-oriented formal method. \holocl
		  provides several derived proof calculi that allow for
		  formal derivations establishing the validity of
		  \acs{uml}/\acs{ocl} formulae. These formulae arise
		  naturally when checking the consistency of class models,
		  when formally refining abstract models to more concrete
		  ones or when discharging side-conditions from
		  model-transformations.},
  keywords	= {\holocl, \acs{uml}, \acs{ocl}, Formal Methods, Theorem
		  Proving, Refinement},
  location	= {Budapest, Hungary},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {Fundamental Approaches to Software Engineering
		  {(\acs{fase08})}},
  talk		= {brucker.ea:hol-ocl:2008},
  language	= {USenglish},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 4961,
  doi		= {10.1007/978-3-540-78743-3_8},
  pages		= {97--100},
  editor	= {Jos{\'e} Fiadeiro and Paola Inverardi},
  title		= {{\holocl} -- {A Formal Proof Environment for
		  {\acs{uml}}/{\acs{ocl}}}},
  categories	= {holocl},
  classification= {conference},
  areas		= {formal methods, software},
  year		= 2008,
  pdf		= {http://www.brucker.ch/bibliography/download/2008/brucker.ea-hol-ocl-2008.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-ocl-2008}
		  
}

@InCollection{	  brucker.ea:hol-testgen-fw:2013,
  abstract	= { The \testgen environment is conceived as a system for
		  modeling and semi-automated test generation with an
		  emphasis on expressive power and generality. However, its
		  underlying technical framework Isabelle/\acs{hol} supports
		  the customization as well as the development of highly
		  automated add-ons working in specific application domains.
		  
		  In this paper, we present \testgen/fw, an add-on for the
		  test framework \testgen, that allows for testing the
		  conformance of firewall implementations to high-level
		  security policies. Based on generic theories specifying a
		  security-policy language, we developed specific theories
		  for network data and firewall policies. On top of these
		  firewall specific theories, we provide mechanisms for
		  policy transformations based on derived rules and adapted
		  code-generators producing test drivers. Our empirical
		  evaluations shows that \testgen/fw is a competitive
		  environment for testing firewalls or high-level policies of
		  local networks. },
  keywords	= {symbolic test case generations, black box testing, theorem
		  proving, network security, firewall testing, conformance
		  testing},
  location	= {Shanghai},
  author	= {Achim D. Brucker and Lukas Br{\"u}gger and Burkhart Wolff},
  booktitle	= {International Colloquium on Theoretical Aspects of
		  Computing (\acs{ictac})},
  language	= {USenglish},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 8049,
  doi		= {10.1007/978-3-642-39718-9_7},
  editor	= {Zhiming Liu and Jim Woodcock and Huibiao Zhu},
  title		= {\testgen/\acs{fw}: An Environment for Specification-based
		  Firewall Conformance Testing},
  categories	= {holtestgen},
  classification= {conference},
  areas		= {security, formal methods},
  public	= {yes},
  year		= 2013,
  pages		= {112--121},
  isbn		= {978-3-642-39717-2},
  pdf		= {http://www.brucker.ch/bibliography/download/2013/brucker.ea-hol-testgen-fw-2013.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-testgen-fw-2013}
		  
}

@TechReport{	  brucker.ea:hol-testgen:2005,
  author	= {Achim D. Brucker and Burkhart Wolff},
  institution	= {\acs{eth} Zurich},
  language	= {USenglish},
  month		= apr,
  title		= {{\testgen} 1.0.0 User Guide},
  categories	= {testing,holtestgen},
  classification= {unrefereed},
  areas		= {formal methods, software},
  keywords	= {symbolic test case generations, black box testing, theorem
		  proving, Isabelle/\acs{hol}},
  year		= 2005,
  number	= 482,
  num_pages	= 50,
  pdf		= {http://www.brucker.ch/bibliography/download/2005/brucker.ea-hol-testgen-2005.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-testgen-2005}
		  
}

@InCollection{	  brucker.ea:hol-testgen:2009,
  abstract	= {We present \testgen, an extensible test environment for
		  specification-based testing build upon the proof assistant
		  Isabelle. \testgen leverages the semi-automated generation
		  of test theorems (a form of a partition), and their
		  refinement to concrete test data, as well as the automatic
		  generation of a test driver for the execution and test
		  result verification.
		  
		  \testgen can also be understood as a unifying technical and
		  conceptual framework for presenting and investigating the
		  variety of unit and sequence test techniques in a logically
		  consistent way. },
  keywords	= {symbolic test case generations, black box testing, white
		  box testing, theorem proving, interactive testing},
  location	= {York, \acs{uk}},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {Fundamental Approaches to Software Engineering
		  {(\acs{fase09})}},
  language	= {USenglish},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 5503,
  doi		= {10.1007/978-3-642-00593-0_28},
  pages		= {417--420},
  editor	= {Marsha Chechik and Martin Wirsing},
  title		= {{\testgen}: An Interactive Test-case Generation Framework},
  categories	= {holtestgen},
  classification= {conference},
  areas		= {formal methods, software},
  year		= 2009,
  pdf		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-hol-testgen-2009.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-testgen-2009}
		  
}

###InCollection{  brucker.ea:hol-testgen:2009,
  abstract	= {We present \testgen, an extensible test environment for
		  specification-based testing build upon the proof assistant
		  Isabelle. \testgen leverages the semi-automated generation
		  of test theorems (a form of a partition), and their
		  refinement to concrete test data, as well as the automatic
		  generation of a test driver for the execution and test
		  result verification.
		  
		  \testgen can also be understood as a unifying technical and
		  conceptual framework for presenting and investigating the
		  variety of unit and sequence test techniques in a logically
		  consistent way. },
  keywords	= {symbolic test case generations, black box testing, white
		  box testing, theorem proving, interactive testing},
  location	= {York, \acs{uk}},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {Fundamental Approaches to Software Engineering
		  {(\acs{fase09})}},
  talk		= {talk:brucker.ea:hol-testgen:2009},
  language	= {USenglish},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 5503,
  doi		= {10.1007/978-3-642-00593-0_28},
  pages		= {417--420},
  editor	= {Marsha Chechik and Martin Wirsing},
  title		= {{\testgen}: An Interactive Test-case Generation Framework},
  categories	= {holtestgen},
  classification= {conference},
  areas		= {formal methods, software},
  year		= 2009,
  pdf		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-hol-testgen-2009.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-testgen-2009}
		  
}

@TechReport{	  brucker.ea:hol-testgen:2010,
  author	= {Achim D. Brucker and Lukas Br{\"u}gger and Matthias P.
		  Krieger and Burkhart Wolff},
  institution	= {\acs{eth} Zurich},
  language	= {USenglish},
  month		= apr,
  title		= {{\testgen} 1.5.0 User Guide},
  categories	= {testing,holtestgen},
  classification= {unrefereed},
  areas		= {formal methods, software},
  keywords	= {symbolic test case generations, black box testing, theorem
		  proving, Isabelle/\acs{hol}},
  year		= 2010,
  number	= 670,
  num_pages	= 248,
  pdf		= {http://www.brucker.ch/bibliography/download/2010/brucker.ea-hol-testgen-2010.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-testgen-2010}
		  
}

@TechReport{	  brucker.ea:hol-testgen:2012,
  author	= {Achim D. Brucker and Lukas Br{\"u}gger and Matthias P.
		  Krieger and Burkhart Wolff},
  institution	= {Laboratoire en Recherche en Informatique (\acs{lri}),
		  Universit\'e Paris-Sud 11, France},
  language	= {USenglish},
  month		= apr,
  title		= {{\testgen} 1.7.0 User Guide},
  categories	= {testing,holtestgen},
  classification= {unrefereed},
  areas		= {formal methods, software},
  keywords	= {symbolic test case generations, black box testing, theorem
		  proving, Isabelle/\acs{hol}},
  year		= 2012,
  number	= 1551,
  num_pages	= 120,
  pdf		= {http://www.brucker.ch/bibliography/download/2012/brucker.ea-hol-testgen-2012.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-testgen-2012}
		  
}

@InCollection{	  brucker.ea:hol-z:2002,
  author	= {Achim D. Brucker and Stefan Friedrich and Frank Rittinger
		  and Burkhart Wolff},
  title		= {\holz 2.0: {A} Proof Environment for {Z}-Specifications},
  editor	= {Dominik Haneberg and Gerhard Schellhorn and Wolfgang
		  Reif},
  booktitle	= {\acs{fm-tools} 2002},
  year		= 2002,
  pages		= {33--38},
  month		= jul,
  organization	= {University Augsburg},
  pdf		= {http://www.brucker.ch/bibliography/download/2002/fmtools_holz_02.pdf}
		  ,
  language	= {USenglish},
  abstract	= {We present a proof environment for the specification
		  language Z on top of Isabelle/\acs{hol}. It comprises a
		  \LaTeX-based front end (including the integrated
		  type-checker \acs{zeta}), generic facilities to generate
		  proof obligations and improved proof support for the
		  logical embedding \holz, namely for the schema-calculus and
		  structural Z proofs.},
  categories	= {holz},
  classification= {workshop},
  areas		= {formal methods, software},
  note		= {Available as Technical Report, University Augsburg, number
		  2002--11.},
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-z-2002}
		  
}

@Article{	  brucker.ea:hol-z:2003,
  abstract	= {We present a new proof environment for the specification
		  language Z. The basis is a semantic representation of Z in
		  a structure-preserving, shallow embedding in
		  Isabelle/\acs{hol}. On top of the embedding, new proof
		  support for the Z schema calculus and for proof structuring
		  are developed. Thus, we integrate Z into a well-known and
		  trusted theorem prover with advanced deduction technology
		  such as higher-order rewriting, tableaux-based provers and
		  arithmetic decision procedures. A further achievement of
		  this work is the integration of our embedding into a new
		  tool-chain providing a \acs{z-}oriented type checker,
		  documentation facilities and macro support for refinement
		  proofs; as a result, the gap has been closed between a
		  logical embedding proven correct and a \emph{tool} suited
		  for applications of non-trivial size.},
  author	= {Achim D. Brucker and Frank Rittinger and Burkhart Wolff},
  journal	= j-ucs,
  language	= {USenglish},
  title		= {\holz 2.0: {A} Proof Environment for {Z}-Specifications},
  volume	= 9,
  number	= 2,
  pages		= {152--172},
  month		= feb,
  year		= 2003,
  pdf		= {http://www.brucker.ch/bibliography/download/2003/jucs_holz_02.pdf}
		  ,
  keywords	= {Theorem Proving, Refinement, Z},
  copyright	= {J.\acs{ucs}},
  copyrighturl	= {http://www.jucs.org/jucs_9_2/hol_z_2},
  categories	= {holz},
  doi		= {10.3217/jucs-009-02-0152},
  issn		= {0948-6968},
  classification= {journal},
  areas		= {formal methods, software},
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-z-2003}
		  
}

@InCollection{	  brucker.ea:information:2010,
  author	= {Achim D. Brucker and Dieter Hutter},
  booktitle	= {International Conference on Availability, Reliability and
		  Security (\acs{ares})},
  language	= {USenglish},
  title		= {Information Flow in Disaster Management Systems},
  year		= 2010,
  classification= {conference},
  areas		= {security},
  public	= {yes},
  publisher	= pub-ieee,
  pages		= {156--163},
  isbn		= {978-0-7695-3965-2},
  doi		= {10.1109/ARES.2010.107},
  abstract	= {Collaborations between organizations in the public sector,
		  e.g., fire brigades, polices, military units, is often done
		  via liaison officers. A liaison officer liaises between two
		  organizations by providing a single point of contact and
		  ensuring the efficient communication and coordination of
		  their activities. Usually an organization embeds a liaison
		  officer in another organization to provide face-to-face
		  coordination. Liaison officers demand special requirements
		  to the security mechanism of the \acs{it} infrastructure of
		  the organization that act as host for a liaison officer.
		  
		  This holds, in particular, for Disaster Management
		  Information Systems (\acs{dmis}). Such systems need, on the
		  one hand, to support various ways of communication in a
		  flexible and ad hoc manner. On the other hand, these
		  systems need to protect, by law, the leakage of sensitive
		  data.
		  
		  In this paper, we present a novel mechanism, based on
		  role-based access control (\acs{rbac}), for supporting the
		  flexible and secure information exchange between
		  organizations using liaison officers. Our mechanism enables
		  liaison officers to decide on their own authority which
		  information they wants share with their home organizations
		  while allowing the host organization to limit the access of
		  liaisons officers to their system in a fine-grained manner.},
  keywords	= {disaster management, information flow, access control,
		  liaison officer},
  pdf		= {http://www.brucker.ch/bibliography/download/2010/brucker.ea-information-2010.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-information-2010}
		  
}

@InCollection{	  brucker.ea:integrating:2009,
  title		= {Integrating Automated and Interactive Protocol
		  Verification},
  author	= {Achim D. Brucker and Sebastian A. M{\"o}dersheim},
  booktitle	= {Workshop on Formal Aspects in Security and Trust
		  (\acs{fast} 2009)},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 5983,
  categories	= {isabelleofmc},
  pages		= {248--262},
  doi		= {10.1007/978-3-642-12459-4_18},
  editor	= {Pierpaolo Degano and Joshua Guttman},
  year		= 2009,
  classification= {workshop},
  keywords	= {protocol verification, model-checking, theorem proving},
  areas		= {security, formal methods},
  public	= {yes},
  abstract	= {A number of current automated protocol verification tools
		  are based on abstract interpretation techniques and other
		  over-approximations of the set of reachable states or
		  traces. The protocol models that these tools employ are
		  shaped by the needs of automated verification and require
		  subtle assumptions. Also, a complex verification tool may
		  suffer from implementation bugs so that in the worst case
		  the tool could accept some incorrect protocols as being
		  correct. These risks of errors are also present, but
		  considerably smaller, when using an \acs{lcf-}style theorem
		  prover like Isabelle. The interactive security proof,
		  however, requires a lot of expertise and time.
		  
		  We combine the advantages of both worlds by using the
		  representation of the over-approx\-imated search space
		  computed by the automated tools as a ``proof idea'' in
		  Isabelle. Thus, we devise proof tactics for Isabelle that
		  generate the correctness proof of the protocol from the
		  output of the automated tools. In the worst case, these
		  tactics fail to construct a proof, namely when the
		  representation of the search space is for some reason
		  incorrect. However, when they succeed, the correctness only
		  relies on the basic model and the Isabelle core.},
  pdf		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-integrating-2009.pdf}
		  ,
  note		= {An extended version of this paper is available as
		  \acs{ibm} Research Technical Report, \acs{rz3750}.},
  filelabel	= {Extended Version},
  file		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-integrating-2009-b.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-integrating-2009}
		  
}

@TechReport{	  brucker.ea:integrating:2009-b,
  title		= {Integrating Automated and Interactive Protocol
		  Verification (Extended Version)},
  author	= {Achim D. Brucker and Sebastian A. M{\"o}dersheim},
  year		= 2009,
  classification= {unrefereed},
  categories	= {isabelleofmc},
  keywords	= {protocol verification, model-checking, theorem proving},
  areas		= {security, formal methods},
  public	= {yes},
  abstract	= {A number of current automated protocol verification tools
		  are based on abstract interpretation techniques and other
		  over-approximations of the set of reachable states or
		  traces. The protocol models that these tools employ are
		  shaped by the needs of automated verification and require
		  subtle assumptions. Also, a complex verification tool may
		  suffer from implementation bugs so that in the worst case
		  the tool could accept some incorrect protocols as being
		  correct. These risks of errors are also present, but
		  considerably smaller, when using an \acs{lcf-}style theorem
		  prover like Isabelle. The interactive security proof,
		  however, requires a lot of expertise and time.
		  
		  We combine the advantages of both worlds by using the
		  representation of the over-approx\-imated search space
		  computed by the automated tools as a ``proof idea'' in
		  Isabelle. Thus, we devise proof tactics for Isabelle that
		  generate the correctness proof of the protocol from the
		  output of the automated tools. In the worst case, these
		  tactics fail to construct a proof, namely when the
		  representation of the search space is for some reason
		  incorrect. However, when they succeed, the correctness only
		  relies on the basic model and the Isabelle core.},
  pdf		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-integrating-2009-b.pdf}
		  ,
  number	= {\acs{rz3750}},
  institution	= {\acs{ibm} Research Zurich},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-integrating-2009-b}
		  
}

@InCollection{	  brucker.ea:interactive:2005,
  keywords	= {symbolic test case generations, black box testing, white
		  box testing, theorem proving, interactive testing},
  abstract	= {\testgen is a test environment for specification-based
		  unit testing build upon the proof assistant
		  Isabelle/\acs{hol}\@. While there is considerable
		  skepticism with regard to interactive theorem provers in
		  testing communities, we argue that they are a natural
		  choice for (automated) symbolic computations underlying
		  systematic tests. This holds in particular for the
		  development on non-trivial formal test plans of complex
		  software, where some parts of the overall activity require
		  inherently guidance by a test engineer. In this paper, we
		  present the underlying methods for both black box and white
		  box testing in interactive unit test scenarios. \testgen
		  can also be understood as a unifying technical and
		  conceptual framework for presenting and investigating the
		  variety of unit test techniques in a logically consistent
		  way. },
  location	= {Edinburgh},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {Formal Approaches to Testing of Software},
  language	= {USenglish},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 3997,
  doi		= {10.1007/11759744_7},
  isbn		= {3-540-25109-X},
  editor	= {Wolfgang Grieskamp and Carsten Weise},
  pdf		= {http://www.brucker.ch/bibliography/download/2005/brucker.ea-interactive-2005.pdf}
		  ,
  project	= {\acs{csfmdos}},
  title		= {Interactive Testing using \testgen},
  classification= {workshop},
  areas		= {formal methods, software},
  categories	= {holtestgen},
  year		= 2005,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-interactive-2005}
		  
}

@InProceedings{	  brucker.ea:mda:2006,
  abstract	= {We present an \acs{mda} framework, developed in the
		  functional programming language \acs{sml}, that tries to
		  bridge the gap between formal software development and the
		  needs of industrial software development, e.g., code
		  generation. Overall, our tool-chain provides support for
		  software modeling using \acs{uml}/\acs{ocl} and guides the
		  user from type-checking and model transformations to code
		  generation and formal analysis of the \acs{uml}/\acs{ocl}
		  model. We conclude with a report on our experiences in
		  using a functional language for implementing \acs{mda} tools. },
  author	= {Achim D. Brucker and J\"urgen Doser and Burkhart Wolff},
  booktitle	= {\acs{ocl} for (Meta-)Models in Multiple Application
		  Domains},
  language	= {USenglish},
  public	= {no},
  classification= {workshop},
  areas		= {formal methods, software, security},
  keywords	= {\acs{ocl}, \acs{uml}, SecureUML, \acs{mda}, \acs{mde},
		  \holocl},
  pages		= {166--181},
  title		= {An {\acs{mda}} Framework Supporting {\acs{ocl}}},
  editor	= {Birgith Demuth and Dan Chiorean and Martin Gogolla and Jos
		  Warmer},
  note		= {Available as Technical Report, University Dresden, number
		  \acs{tud-fi06-04-}Sept. 2006.},
  issn		= {1430-211X},
  organization	= {University Dresden},
  location	= {Genova, Italy},
  year		= 2006,
  pdf		= {http://www.brucker.ch/bibliography/download/2006/brucker.ea-mda-2006.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-mda-2006}
		  
}

@Article{	  brucker.ea:mda:2006-b,
  abstract	= {We present an \acs{mda} framework, developed in the
		  functional programming language \acs{sml}, that tries to
		  bridge the gap between formal software development and the
		  needs of industrial software development, e.g., code
		  generation. Overall, our tool-chain provides support for
		  software modeling using \acs{uml}/\acs{ocl} and guides the
		  user from type-checking and model transformations to code
		  generation and formal analysis of the \acs{uml}/\acs{ocl}
		  model. We conclude with a report on our experiences in
		  using a functional language for implementing \acs{mda} tools. },
  author	= {Achim D. Brucker and J\"urgen Doser and Burkhart Wolff},
  language	= {USenglish},
  public	= {yes},
  categories	= {holocl},
  classification= {workshop},
  areas		= {security, formal methods, software},
  keywords	= {\acs{mde} , \acs{mda} , \acs{ocl}, model transformation,
		  code-generation, verification},
  title		= {An {\acs{mda}} Framework Supporting{ \acs{ocl}}},
  editor	= {Birgith Demuth and Dan Chiorean and Martin Gogolla and Jos
		  Warmer},
  issn		= {1863-2122},
  volume	= 5,
  year		= 2006,
  journal	= j-eceasst,
  copyright	= {\acs{eceasst}},
  copyrighturl	= {http://eceasst.cs.tu-berlin.de/index.php/eceasst/article/view/45}
		  ,
  pdf		= {http://www.brucker.ch/bibliography/download/2006/brucker.ea-mda-2006-b.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-mda-2006-b}
		  
}

@InCollection{	  brucker.ea:metamodel:2007,
  author	= {Achim D. Brucker and J{\"u}rgen Doser},
  title		= {Metamodel-based \acs{uml} Notations for Domain-specific
		  Languages},
  editor	= {Jean Marie Favre and Dragan Gasevic and Ralf L{\"a}mmel
		  and Andreas Winter},
  booktitle	= {4th International Workshop on Software Language
		  Engineering (\acs{atem} 2007)},
  year		= 2007,
  month		= oct,
  pdf		= {http://www.brucker.ch/bibliography/download/2007/brucker.ea-metamodel-2007.pdf}
		  ,
  language	= {USenglish},
  abstract	= {We present a metamodel-based approach for specifying
		  \acs{uml} notations for domain-specific modeling languages.
		  Traditionally, domain specific languages are either defined
		  by \acs{uml} profiles or using metamodels. We provide a
		  generic integration of these two methods supporting
		  arbitrary \acs{uml} profiles and metamodels. Our approach
		  provides a bi-directional mapping between the \acs{uml}
		  notation and the metamodel of the domain specific language.
		  We use \acs{ocl} constraints that are embedded into the
		  metamodel, for describing the mapping between the \acs{uml}
		  notation and the metamodel. Moreover, we describe an
		  implementation, as ArgoUML-plugin, for arbitrary SecureUML
		  dialects.},
  public	= {yes},
  classification= {workshop},
  areas		= {security, software},
  keywords	= {\acs{dsl}, \acs{uml}, \acs{ocl}, \acs{uml} Profile,
		  Metamodel, \acs{mof}, SecureUML},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-metamodel-2007}
		  
}

@InCollection{	  brucker.ea:model-based:2008,
  abstract	= {Firewalls are a cornerstone of todays security
		  infrastructure for networks. Their configuration,
		  implementing a firewall policy, is inherently complex, hard
		  to understand, and difficult to validate.
		  
		  We present a substantial case study performed with the
		  model-based testing tool \testgen. Based on a formal model
		  of firewalls and their policies in \acs{hol}, we first
		  present a derived theory for simplifying policies. We
		  discuss different test plans for test specifications.
		  Finally, we show how to integrate these issues to a
		  domain-specific firewall testing tool \testgen/\acs{fw}.},
  editor	= {Kenji Suzuki and Teruo Higashino},
  location	= {Tokyo, Japan},
  author	= {Achim D. Brucker and Lukas Br{\"u}gger and Burkhart Wolff},
  booktitle	= {Testcom/\acs{fates} 2008},
  language	= {USenglish},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 5047,
  doi		= {10.1007/978-3-540-68524-1_9},
  pages		= {103--118},
  title		= {Model-based Firewall Conformance Testing},
  categories	= {holtestgen},
  classification= {conference},
  areas		= {security, formal methods},
  keywords	= {Security Testing, Model-based Testing, Firewall,
		  Conformance Testing},
  year		= 2008,
  pdf		= {http://www.brucker.ch/bibliography/download/2008/brucker.ea-model-based-2008.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-model-based-2008}
		  
}

@InProceedings{	  brucker.ea:model-based:2011,
  title		= {An Approach to Modular and Testable Security Models of
		  Real-world Health-care Applications},
  author	= {Achim D. Brucker and Lukas Br{\"u}gger and Paul Kearney
		  and Burkhart Wolff},
  booktitle	= conf-sacmat,
  language	= {USenglish},
  publisher	= pub-acm,
  location	= {Innsbruck, Austria},
  categories	= {holtestgen},
  classification= {conference},
  areas		= {security, formal methods},
  year		= 2011,
  copyright	= {\acs{acm}},
  copyrighturl	= {http://dl.acm.org/authorize?431936},
  public	= {yes},
  pages		= {133--142},
  pdf		= {http://www.brucker.ch/bibliography/download/2011/brucker.ea-model-based-2011.pdf}
		  ,
  abstract	= {We present a generic modular policy modelling framework
		  and instantiate it with a substantial case study for
		  model-based testing of some key security mechanisms of
		  applications and services of the NPfIT. NPfIT, the National
		  Programme for \acs{it}, is a very large-scale development
		  project aiming to modernise the \acs{it} infrastructure of
		  the \acs{nhs} in England. Consisting of heterogeneous and
		  distributed applications, it is an ideal target for
		  model-based testing techniques of a large system exhibiting
		  critical security features.
		  
		  We model the four information governance principles,
		  comprising a role-based access control model, as well as
		  policy rules governing the concepts of patient consent,
		  sealed envelopes and legitimate relationship. The model is
		  given in \acs{hol} and processed together with suitable
		  test specifications in the \testgen system, that generates
		  test sequences according to them. Particular emphasis is
		  put on the modular description of security policies and
		  their generic combination and its consequences for
		  model-based testing.},
  doi		= {10.1145/1998441.1998461},
  isbn		= {978-1-4503-0688-1},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-model-based-2011}
		  
}

@InCollection{	  brucker.ea:model-driven:2009,
  title		= {Model-driven Development of Secure and Safe
		  Supply-chains},
  author	= {Achim D. Brucker and Andreas Schaad and Christian Wolter},
  year		= 2009,
  booktitle	= {Future Security: 4th Security Research Conference
		  Karlsruhe},
  month		= sep,
  classification= {poster},
  areas		= {security, software},
  public	= {no},
  keywords	= {security, mdd, supply-chain, process-models},
  abstract	= {We present a model-driven approach supporting the
		  construction of safe and secure supply chains in all major
		  phases. For example, already in the design phase, a domain
		  expert specifies the potential risks and vulnerabilities of
		  a supply chain in a pharmaceutical context. Based on these
		  specifications, the domain expert is assisted in the
		  placement of probing devices for ensuring the safety and
		  security of the supply chain. Moreover, the system
		  configuration and process implementations can be generated
		  automatically based on these models. Any discrepancies
		  between the requirements given by the domain expert, and
		  the system can be communicated within a graphical
		  representation. },
  mypdf		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-model-driven-2009.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-model-driven-2009}
		  
}

@Article{	  brucker.ea:modellierung:2009,
  author	= {Achim D. Brucker and Andreas Schaad and Christian Wolter},
  title		= {{Prozessmodellierung}: {Einbinden} von {Sicherheitsregeln}
		  in {Gesch\"aftsprozesse}},
  journal	= {iX},
  year		= 2009,
  volume	= 3,
  classification= {popular},
  areas		= {security, software},
  language	= {german},
  month		= mar,
  pages		= {118--121},
  issn		= {0935-9680},
  publisher	= pub-heise,
  public	= {yes},
  note_de	= {Eine aktualisierte Version des Artikels ist im \glqq iX
		  special -- Sicher im Netz\grqq{} (Oktober 2010) erschienen.},
  note		= {An updated version of this article was published in the
		  \glqq iX special -- Sicher im Netz\grqq{} (October 2010).},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-modellierung-2009}
		  
}

@Article{	  brucker.ea:modellierung:2010,
  author	= {Achim D. Brucker and Andreas Schaad and Christian Wolter},
  title		= {{Prozessmodellierung}: {Einbinden} von {Sicherheitsregeln}
		  in {Gesch\"aftsprozesse}},
  journal	= {iX special -- Sicher im Netz},
  year		= 2010,
  volume	= 3,
  classification= {popular},
  areas		= {security, software},
  language	= {german},
  month		= oct,
  pages		= {152--155},
  issn		= {0935-9680},
  publisher	= pub-heise,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-modellierung-2010}
		  
}

@Misc{		  brucker.ea:module-specification:2013,
  author	= {Achim D. Brucker and Thomas Deuster},
  title		= {Modular Static Application Security Testing},
  year		= 2013,
  month		= 07,
  day		= 01,
  number	= {\acs{us} 13/932,257},
  note		= {\acs{us} 13/932,257},
  type		= {Patent Application},
  howpublished	= {Patent Application},
  version	= {\acs{a1}},
  assignee	= {\acs{sap} \acs{ag}},
  location	= {\acs{us}},
  nationality	= {\acs{us}},
  filing_num	= 120458,
  yearfiled	= 2013,
  monthfiled	= 07,
  dayfiled	= 01,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-module-specification-2013}
		  ,
  abstract	= { The integration of security analysis techniques into the
		  development process of new software, as well as the
		  applicability of these techniques to already existing
		  implementations, is one of the big challenges the software
		  industry is currently facing. Some major goals of these
		  techniques are (amongst others): identifying trustful
		  service- or data-sources, reducing the
		  vulnerable/exploitable interfaces of stand-alone
		  implementations and distributed systems, and the definition
		  of security standards to make independent systems
		  comparable for analysis.
		  
		  In this \acs{idf}, we present a strategy to describe
		  procedures or modules in a standardized way, so different
		  analysis algorithms do not have to analyze this procedure
		  (module) more than once. This description is created in a
		  way that each possible invoking context is defined
		  explicitly with the safety information computed
		  accordingly.},
  classification= {pending},
  areas		= {security},
  public	= {no}
}

@TechReport{	  brucker.ea:note:2002,
  author	= {Achim D. Brucker and Burkhart Wolff},
  institution	= {\ALUF},
  language	= {USenglish},
  month		= jan,
  public	= {yes},
  title		= {A Note on Design Decisions of a Formalization of the
		  {\acs{ocl}}},
  abstract	= {We compare several formal and informal approaches to
		  define the semantics of the Object Constraint Language
		  (\acs{ocl}). This comparison reveals a number of minor and
		  major design problems to be settled in upcoming versions of
		  the \acs{ocl} standard. We review these problems in the
		  context of our work of providing a formal semantics of
		  \acs{ocl} through an conservative embedding in \acs{hol}
		  using the Isabelle theorem prover.},
  keywords	= {\acs{uml}, \acs{ocl}, formal semantics, \acs{hol}, Isabelle},
  categories	= {holocl},
  classification= {unrefereed},
  areas		= {formal methods, software},
  year		= 2002,
  number	= 168,
  pdf		= {http://www.brucker.ch/bibliography/download/2002/ocl_note.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-note-2002}
		  
}

@InCollection{	  brucker.ea:ocl-null:2009,
  author	= {Achim D. Brucker and Matthias P. Krieger and Burkhart
		  Wolff},
  wsbooktitle	= {The Pragmatics of \acs{ocl} and Other Textual
		  Specification Languages},
  note		= {Selected best papers from all satellite events of the
		  MoDELS 2009 conference.},
  booktitle	= {Models in Software Engineering},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 6002,
  editor	= {Sudipto Gosh},
  pages		= {261--275},
  doi		= {10.1007/978-3-642-12261-3_25},
  language	= {USenglish},
  title		= {Extending \acs{ocl} with Null-References},
  year		= 2009,
  classification= {workshop},
  categories	= {holocl},
  location	= {Denver, Colorado, \acs{usa}},
  areas		= {formal methods, software},
  public	= {yes},
  abstract	= {From its beginnings, \acs{ocl} is based on a strict
		  semantics for undefinedness, with the exception of the
		  logical connectives of type Boolean that constitute a
		  three-valued propositional logic. Recent versions of the
		  \acs{ocl} standard added a second exception element, which,
		  similar to the null references in object-oriented
		  programming languages, is given a non-strict semantics.
		  Unfortunately, this extension has been done in an ad hoc
		  manner, which results in several inconsistencies and
		  contradictions.
		  
		  In this paper, we present a consistent formal semantics
		  (based on our \holocl approach) that includes such a
		  non-strict exception element. We discuss the possible
		  consequences concerning class diagram semantics as well as
		  deduction rules. The benefits of our approach for the
		  specification-pragmatics of design level operation
		  contracts are demonstrated with a small case-study.},
  bibkey	= {brucker.ea:ocl-null:2009},
  pdf		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-ocl-null-2009.pdf}
		  ,
  keywords	= {\holocl, \acs{uml}, \acs{ocl}, null reference, formal
		  semantics},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-ocl-null-2009}
		  
}

###InCollection{  brucker.ea:ocl-null:2009,
  author	= {Achim D. Brucker and Matthias P. Krieger and Burkhart
		  Wolff},
  wsbooktitle	= {The Pragmatics of \acs{ocl} and Other Textual
		  Specification Languages},
  note		= {Selected best papers from all satellite events of the
		  MoDELS 2009 conference.},
  booktitle	= {Models in Software Engineering},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 6002,
  editor	= {Sudipto Gosh},
  pages		= {261--275},
  doi		= {10.1007/978-3-642-12261-3_25},
  language	= {USenglish},
  title		= {Extending \acs{ocl} with Null-References},
  year		= 2009,
  classification= {workshop},
  categories	= {holocl},
  location	= {Denver, Colorado, \acs{usa}},
  areas		= {formal methods, software},
  public	= {yes},
  abstract	= {From its beginnings, \acs{ocl} is based on a strict
		  semantics for undefinedness, with the exception of the
		  logical connectives of type Boolean that constitute a
		  three-valued propositional logic. Recent versions of the
		  \acs{ocl} standard added a second exception element, which,
		  similar to the null references in object-oriented
		  programming languages, is given a non-strict semantics.
		  Unfortunately, this extension has been done in an ad hoc
		  manner, which results in several inconsistencies and
		  contradictions.
		  
		  In this paper, we present a consistent formal semantics
		  (based on our \holocl approach) that includes such a
		  non-strict exception element. We discuss the possible
		  consequences concerning class diagram semantics as well as
		  deduction rules. The benefits of our approach for the
		  specification-pragmatics of design level operation
		  contracts are demonstrated with a small case-study.},
  bibkey	= {brucker.ea:ocl-null:2009},
  pdf		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-ocl-null-2009.pdf}
		  ,
  keywords	= {\holocl, \acs{uml}, \acs{ocl}, null reference, formal
		  semantics},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-ocl-null-2009}
		  
}

@InCollection{	  brucker.ea:ocl-testing:2010,
  abstract	= {Automated test data generation is an important method for
		  the verification and validation of \acs{uml}/\acs{ocl}
		  specifications. In this paper, we present an extension of
		  \acs{dnf-}based test case generation methods to cyclic
		  class-diagrams and recursive query operations on them. A
		  key feature of our approach is a implicit representation of
		  object graphs avoiding a representation based on
		  object-id's; thus, our approach avoids the generation of
		  isomorphic object graphs by using a concise and still
		  human-readable symbolic representation.},
  author	= {Achim D. Brucker and Matthias P. Krieger and Delphine
		  Longuet and Burkhart Wolff},
  booktitle	= {MoDELS Workshops},
  language	= {USenglish},
  public	= {yes},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 6627,
  classification= workshop,
  areas		= {formal methods, software},
  year		= 2010,
  note		= {Selected best papers from all satellite events of the
		  MoDELS 2010 conference. Workshop on \acs{ocl} and Textual
		  Modelling.},
  categories	= {holocl,holtestgen},
  keywords	= {\acs{ocl}, \acs{uml}, test case generation,
		  specification-based testing},
  pages		= {334--348},
  title		= {A Specification-based Test Case Generation Method for
		  {\acs{uml}}/{\acs{ocl}}},
  editor	= {J{\"u}rgen Dingel and Arnor Solberg},
  isbn		= {978-3-642-21209-3},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-ocl-testing-2010}
		  ,
  pdf		= {http://www.brucker.ch/bibliography/download/2010/brucker.ea-ocl-testing-2010.pdf}
		  ,
  doi		= {10.1007/978-3-642-21210-9_33}
}

###InCollection{  brucker.ea:ocl-testing:2010,
  abstract	= {Automated test data generation is an important method for
		  the verification and validation of \acs{uml}/\acs{ocl}
		  specifications. In this paper, we present an extension of
		  \acs{dnf-}based test case generation methods to cyclic
		  class-diagrams and recursive query operations on them. A
		  key feature of our approach is a implicit representation of
		  object graphs avoiding a representation based on
		  object-id's; thus, our approach avoids the generation of
		  isomorphic object graphs by using a concise and still
		  human-readable symbolic representation.},
  author	= {Achim D. Brucker and Matthias P. Krieger and Delphine
		  Longuet and Burkhart Wolff},
  booktitle	= {MoDELS Workshops},
  language	= {USenglish},
  public	= {yes},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 6627,
  classification= workshop,
  areas		= {formal methods, software},
  year		= 2010,
  note		= {Selected best papers from all satellite events of the
		  MoDELS 2010 conference. Workshop on \acs{ocl} and Textual
		  Modelling.},
  categories	= {holocl,holtestgen},
  keywords	= {\acs{ocl}, \acs{uml}, test case generation,
		  specification-based testing},
  pages		= {334--348},
  title		= {A Specification-based Test Case Generation Method for
		  {\acs{uml}}/{\acs{ocl}}},
  editor	= {J{\"u}rgen Dingel and Arnor Solberg},
  isbn		= {978-3-642-21209-3},
  pdf		= {http://www.brucker.ch/bibliography/download/2010/brucker.ea-ocl-testing-2010.pdf}
		  ,
  doi		= {10.1007/978-3-642-21210-9_33},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-ocl-testing-2010}
		  
}

@InCollection{	  brucker.ea:package:2006,
  author	= {Achim D. Brucker and Burkhart Wolff},
  title		= {A Package for Extensible Object-Oriented Data Models with
		  an Application to {\impoo}},
  editor	= {Abhik Roychoudhury and Zijiang Yang},
  booktitle	= {International Workshop on Software Verification and
		  Validation (\acs{svv} 2006)},
  year		= 2006,
  month		= aug,
  pdf		= {http://www.brucker.ch/bibliography/download/2006/brucker.ea-package-2006.pdf}
		  ,
  language	= {USenglish},
  abstract	= {We present a datatype package that enables the use of
		  shallow embedding technique to object-oriented
		  specification and programming languages. The package
		  incrementally compiles an object-oriented data model to a
		  theory containing object-universes, constructors, and
		  accessor functions, coercions between dynamic and static
		  types, characteristic sets, their relations reflecting
		  inheritance, and the necessary class invariants. The
		  package is conservative, i.e., all properties are derived
		  entirely from axiomatic definitions. As an application, we
		  use the package for an object-oriented core-language called
		  \\acs{impoo}, for which correctness of a Hoare logic with
		  respect to an operational semantics is proven.},
  categories	= {holocl},
  public	= {yes},
  classification= {workshop},
  areas		= {formal methods, software},
  keywords	= {datatype package, extensible object-oriented data model,
		  object-oriented specification,shallow embedding},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-package-2006}
		  
}

@InProceedings{	  brucker.ea:path-expressions:2013,
  author	= {Achim D. Brucker and Delphine Longuet and Fr{\'e}d{\'e}ric
		  Tuong and Burkhart Wolff},
  title		= {On the Semantics of Object-oriented Data Structures and
		  Path Expressions},
  booktitle	= {Workshop on \acs{ocl}, Model Constraint and Query
		  Languages (\acs{ocl} 2013)},
  year		= 2013,
  editor	= {Jordi Cabot and Martin Gogolla and Istvan Rath and Edward
		  Willink},
  abstract	= { \\acs{uml}/\\acs{ocl} is perceived as the de-facto
		  standard for specifying object-oriented models in general
		  and data models in particular. Since recently, all data
		  types of \\acs{uml}/\\acs{ocl} comprise two different
		  exception elements: \inlineocl{invalid} (``bottom'' in
		  semantics terminology) and \inlineocl{null} (for
		  ``non-existing element''). This has far-reaching
		  consequences on both the logical and algebraic properties
		  of \\acs{ocl} expressions as well as the path expressions
		  over object-oriented data structures, \ie, class models.
		  
		  In this paper, we present a formal semantics for
		  object-oriented data models in which all data types and,
		  thus, all class attributes and path expressions, support
		  \inlineocl{invalid} and \inlineocl{null}. Based on this
		  formal semantics, we present a set of \\acs{ocl} test cases
		  that can be used for evaluating the support of
		  \inlineocl{null} and \inlineocl{invalid} in \\acs{ocl} tools.},
  classification= {workshop},
  categories	= {holocl},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-path-expressions-2013}
		  ,
  areas		= {formal methods, software},
  keywords	= { Object-oriented Data Structures, Path Expressions,
		  Featherweight \acs{ocl}, Null, Invalid, Formal Semantics},
  public	= {yes},
  pdf		= {http://www.brucker.ch/bibliography/download/2013/brucker.ea-path-expressions-2013.pdf}
		  ,
  note		= {An extended version of this paper is available as
		  \acs{lri} Technical Report 1565.},
  filelabel	= {Extended Version},
  file		= {http://www.brucker.ch/bibliography/download/2013/brucker.ea-path-expressions-2013-b.pdf}
		  
}

@TechReport{	  brucker.ea:path-expressions:2013-b,
  author	= {Achim D. Brucker and Delphine Longuet and Fr{\'e}d{\'e}ric
		  Tuong and Burkhart Wolff},
  title		= {On the Semantics of Object-oriented Data Structures and
		  Path Expressions (Extended Version)},
  booktitle	= {Workshop on \acs{ocl} and Textual Modelling (\acs{ocl}
		  2013)},
  year		= 2013,
  abstract	= { \\acs{uml}/\\acs{ocl} is perceived as the de-facto
		  standard for specifying object-oriented models in general
		  and data models in particular. Since recently, all data
		  types of \\acs{uml}/\\acs{ocl} comprise two different
		  exception elements: \inlineocl{invalid} (``bottom'' in
		  semantics terminology) and \inlineocl{null} (for
		  ``non-existing element''). This has far-reaching
		  consequences on both the logical and algebraic properties
		  of \\acs{ocl} expressions as well as the path expressions
		  over object-oriented data structures, \ie, class models.
		  
		  In this paper, we present a formal semantics for
		  object-oriented data models in which all data types and,
		  thus, all class attributes and path expressions, support
		  \inlineocl{invalid} and \inlineocl{null}. Based on this
		  formal semantics, we present a set of \\acs{ocl} test cases
		  that can be used for evaluating the support of
		  \inlineocl{null} and \inlineocl{invalid} in \\acs{ocl} tools.},
  classification= {unrefereed},
  categories	= {holocl},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-path-expressions-2013-b}
		  ,
  number	= 1565,
  institution	= {Laboratoire en Recherche en Informatique (\acs{lri}),
		  Universit\'e Paris-Sud 11, France},
  areas		= {formal methods, software},
  keywords	= { Object-oriented Data Structures, Path Expressions,
		  Featherweight \acs{ocl}, Null, Invalid, Formal Semantics},
  public	= {yes},
  pdf		= {http://www.brucker.ch/bibliography/download/2013/brucker.ea-path-expressions-2013-b.pdf}
		  
}

@InCollection{	  brucker.ea:proposal:2002,
  abstract	= {We present a formal semantics as a conservative shallow
		  embedding of the Object Constraint Language (\acs{ocl}).
		  \acs{ocl} is currently under development within an open
		  standardization process within the \acs{omg}; our work is
		  an attempt to accompany this process by a proposal solving
		  open questions in a consistent way and exploring
		  alternatives of the language design. Moreover, our encoding
		  gives the foundation for tool supported reasoning over
		  \acs{ocl} specifications, for example as basis for test
		  case generation.},
  keywords	= {Isabelle, \acs{ocl}, \acs{uml}, shallow embedding, testing},
  location	= {Hampton, \acs{va}, \acs{usa}},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {Theorem Proving in Higher Order Logics (TPHOLs)},
  editor	= {V{\'\i}ctor A. Carre{\~n}o and C{\'e}sar A. Mu{\~n}oz and
		  Sophi{\`e}ne Tahar},
  language	= {USenglish},
  pdf		= {http://www.brucker.ch/bibliography/download/2002/brucker.ea-proposal-2002.pdf}
		  ,
  filelabel	= {Extended Version},
  file		= {http://www.brucker.ch/bibliography/download/2002/ocl_semantic_extended.pdf}
		  ,
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 2410,
  pages		= {99--114},
  project	= {\acs{csfmdos}},
  doi		= {10.1007/3-540-45685-6_8},
  title		= {A Proposal for a Formal {\acs{ocl}} Semantics in
		  {Isabelle/\acs{hol}}},
  categories	= {holocl},
  classification= {conference},
  areas		= {formal methods, software},
  isbn		= {3-540-44039-9},
  issn		= {0302-9743},
  year		= 2002,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-proposal-2002}
		  
}

@Misc{		  brucker.ea:sanitizer:2013,
  author	= {Achim D. Brucker and Tim Herres},
  title		= {A Method for the Automated Detection and Validation of
		  Sanitizers},
  year		= 2013,
  month		= 06,
  day		= 24,
  number	= {\acs{us} 13/918,101},
  note		= {\acs{us} 13/918,101},
  type		= {Patent Application},
  howpublished	= {Patent Application},
  version	= {\acs{a1}},
  assignee	= {\acs{sap} \acs{ag}},
  location	= {\acs{us}},
  nationality	= {\acs{us}},
  filing_num	= 120580,
  yearfiled	= 2013,
  monthfiled	= 2013,
  dayfiled	= 06,
  pat_refs	= 24,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-sanitizer-2013}
		  ,
  abstract	= { Static Application Security Testing (\acs{sast}) is a
		  technique that statically (\ie, without actually
		  executing/running) analyses program source code for finding
		  problems. These problems can either endanger the security
		  or safety of a computer program. Most of these problems are
		  caused by an unchecked (unvalidated) data-flows from a sink
		  (\eg, input from a user) to a source (\eg, access to a
		  database).
		  
		  Thus, one of the main problems a \acs{sast} tool has to
		  solve is to detect if a data-flow between a sink and a
		  source contains a sanitizer, \ie, a functions that
		  validates (respectively, ``sanitizes'') the data from the
		  source. State of the art tools use a pre-defined list of
		  sanitizers. This approach has several limitations:
		  \begin{itemize} \item the list is incomplete, \ie, does not
		  contain a function \inlinejs|f| that actually correctly
		  sanitizes input. This results in \emph{false positives},
		  \ie, falsely reported warnings that need to be analyzed
		  manually (which is manual labor-intensive and, thus,
		  costly) \item the list only contains static information
		  about the sanitizers that is usually coarse-grained. This
		  might result in detecting sanitizers wrongly. This results
		  in \emph{false negatives}, \ie, actual vulnerabilities that
		  are not reported. \end{itemize} We propose a method that,
		  during the static analysis, tests potential sanitation
		  functions dynamically (in a ``sandboxed'' environment) in
		  the context they are actually used. Overall, our inventions
		  addresses both limitations, \ie, using our invention, the
		  results of \acs{sast} tools will have a significant lower
		  false positive rate as well as a significant lower false negative rate. },
  classification= {pending},
  areas		= {security},
  public	= {no}
}

@Misc{		  brucker.ea:secure-bpm-impl:2012,
  author	= {Achim D. Brucker and Isabelle Hang},
  title		= {Static Enforcement of Process-level Security and
		  Compliance Specifications for Cloud-based Systems},
  year		= 2012,
  month		= 09,
  day		= 03,
  number	= {\acs{us} 13/598,928},
  note		= {\acs{us} 13/598,928},
  type		= {Patent Application},
  howpublished	= {Patent Application},
  version	= {\acs{a1}},
  assignee	= {\acs{sap} \acs{ag}},
  location	= {\acs{us}},
  nationality	= {\acs{us}},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-secure-bpm-impl-2012}
		  ,
  yearfiled	= 2012,
  monthfiled	= 09,
  dayfiled	= 03,
  abstract	= {Implementations of the present disclosure include methods
		  for statically checking conformance of a
		  computer-implemented service at a source code level to
		  requirements specified at a process level. In some
		  implementations, methods include actions of receiving
		  source code of the computer-implemented service, receiving
		  one or more rules, the one or more rules being generated
		  based on a mapping and including a set of technical
		  requirements that can be checked on the source code level,
		  the mapping associating the requirements with the source
		  code, and processing the source code and the one or more
		  rules using static code analysis (\acs{sca}) to generate a
		  result, the result indicating whether the
		  computer-implemented service conforms to the requirements.},
  classification= {pending},
  areas		= {security},
  public	= {no}
}

@InProceedings{	  brucker.ea:secure:2012,
  author	= {Achim D. Brucker and Isabelle Hang},
  title		= {Secure and Compliant Implementation of Business
		  Process-driven Systems},
  talk		= {talk:brucker.ea:secure:2012},
  language	= {USenglish},
  booktitle	= {Joint Workshop on Security in Business Processes
		  (\acs{sbp})},
  editor	= {Marcello La Rosa and Pnina Soffer},
  pages		= {662--674},
  year		= 2012,
  publisher	= pub-springer,
  volume	= 132,
  series	= {Lecture Notes in Business Information Processing
		  (\acs{lnbip})},
  doi		= {10.1007/978-3-642-36285-9_66},
  abstract	= {Today's businesses are inherently process-driven.
		  Consequently, the use of business-process driven systems,
		  usually implemented on top of \emph{service-oriented} or
		  \emph{cloud-based} infrastructures, is increasing. At the
		  same time, the demand on the security, privacy, and
		  compliance of such systems is increasing as well. As a
		  result, the costs---with respect to computational effort at
		  runtime as well as financial costs---for operating
		  business-process driven systems increase steadily.
		  
		  In this paper, we present a method for statically checking
		  the security and conformance of the system implementation,
		  \eg, on the source code level, to requirements specified on
		  the business process level. As the compliance is statically
		  guaranteed---already at design-time---this method reduces
		  the number of run-time checks for ensuring the security and
		  compliance and, thus, improves the runtime performances.
		  Moreover, it reduces the costs of system audits, as there
		  is no need for analyzing the generated log files for
		  validating the compliance to the properties that are
		  already statically guaranteed.},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-secure-2012}
		  ,
  pdf		= {http://www.brucker.ch/bibliography/download/2012/brucker.ea-secure-2012.pdf}
		  ,
  classification= {workshop},
  areas		= {software,security},
  keywords	= {Business Process Security, Secure Service Tasks,
		  \acs{bpmn}, Static Program Analysis},
  public	= {yes}
}

@InProceedings{	  brucker.ea:securebpmn:2012,
  title		= {{SecureBPMN}: Modeling and Enforcing Access Control
		  Requirements in Business Processes},
  author	= {Achim D. Brucker and Isabelle Hang and Gero L{\"u}ckemeyer
		  and Raj Ruparel},
  booktitle	= conf-sacmat,
  language	= {USenglish},
  publisher	= pub-acm,
  location	= {Newark, \acs{usa}},
  classification= {conference},
  areas		= {security, software,bpm},
  year		= 2012,
  copyright	= {\acs{acm}},
  doi		= {10.1145/2295136.2295160},
  mycopyrighturl= {http://dl.acm.org/authorize?6705782},
  public	= {yes},
  pages		= {123--126},
  pdf		= {http://www.brucker.ch/bibliography/download/2012/brucker.ea-securebpmn-2012.pdf}
		  ,
  abstract	= {Modern enterprise systems have to comply to regulations
		  such as Basel \acs{iii} resulting in complex security
		  requirements. These requirements need to be modeled at
		  design-time and enforced at runtime. Moreover, modern
		  enterprise systems are often business-process driven, i.
		  e., the system behavior is described as high-level business
		  processes that are executed by a business process execution
		  engine.
		  
		  Consequently, there is a need for an integrated and
		  tool-supported methodology that allows for specifying and
		  enforcing compliance and security requirements for business
		  process-driven enterprise systems.
		  
		  In this paper, we present a tool chain supporting both the
		  design-time modeling as well as the run-time enforcement of
		  security requirements for business process-driven systems.},
  isbn		= {978-1-4503-1295-0},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-securebpmn-2012}
		  
}

@InProceedings{	  brucker.ea:semantic:2006,
  abstract	= {We report on the results of a long-term project to
		  formalize the semantics of \acs{ocl} 2.0 in Higher-order
		  Logic (\acs{hol}). The ultimate goal of the project is to
		  provide a formalized, machine-checked semantic basis for a
		  theorem proving environment for \acs{ocl} (as an example
		  for an object-oriented specification formalism) which is as
		  faithful as possible to the original informal semantics. We
		  report on various (minor) inconsistencies of the \acs{ocl}
		  semantics, discuss the more recent attempt to align the
		  \acs{ocl} semantics with \acs{uml} 2.0 and suggest several
		  extensions which make, in our view, \acs{ocl} semantics
		  more fit for future extensions towards programming-like
		  verifications and specification refinement, which are, in
		  our view, necessary to make \acs{ocl} more fit for future
		  extensions. },
  author	= {Achim D. Brucker and J\"urgen Doser and Burkhart Wolff},
  language	= {USenglish},
  public	= {no},
  booktitle	= {\acs{ocl} for (Meta-)Models in Multiple Application
		  Domains},
  classification= {workshop},
  areas		= {software},
  keywords	= {\acs{ocl} specification, \acs{uml}},
  title		= {Semantic Issues of {\acs{ocl}}: Past, Present, and Future},
  pages		= {213--228},
  talk		= {talk:brucker.ea:semantic:2006},
  editor	= {Birgith Demuth and Dan Chiorean and Martin Gogolla and Jos
		  Warmer},
  note		= {Available as Technical Report, University Dresden, number
		  \acs{tud-fi06-04-}Sept. 2006.},
  issn		= {1430-211X},
  organization	= {University Dresden},
  location	= {Genova, Italy},
  year		= 2006,
  pdf		= {http://www.brucker.ch/bibliography/download/2006/brucker.ea-semantic-2006.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-semantic-2006}
		  
}

@Article{	  brucker.ea:semantic:2006-b,
  abstract	= {We report on the results of a long-term project to
		  formalize the semantics of \acs{ocl} 2.0 in Higher-order
		  Logic (\acs{hol}). The ultimate goal of the project is to
		  provide a formalized, machine-checked semantic basis for a
		  theorem proving environment for \acs{ocl} (as an example
		  for an object-oriented specification formalism) which is as
		  faithful as possible to the original informal semantics. We
		  report on various (minor) inconsistencies of the \acs{ocl}
		  semantics, discuss the more recent attempt to align the
		  \acs{ocl} semantics with \acs{uml} 2.0 and suggest several
		  extensions which make, in our view, \acs{ocl} semantics
		  more fit for future extensions towards programming-like
		  verifications and specification refinement, which are, in
		  our view, necessary to make \acs{ocl} more fit for future
		  extensions. },
  author	= {Achim D. Brucker and J\"urgen Doser and Burkhart Wolff},
  language	= {USenglish},
  public	= {yes},
  categories	= {holocl},
  classification= {workshop},
  areas		= {formal methods, software},
  keywords	= {\holocl, \acs{uml}/\acs{ocl}, formal semantics},
  title		= {Semantic Issues of {\acs{ocl}}: Past, Present, and Future},
  editor	= {Birgith Demuth and Dan Chiorean and Martin Gogolla and Jos
		  Warmer},
  issn		= {1863-2122},
  volume	= 5,
  year		= 2006,
  journal	= j-eceasst,
  copyright	= {\acs{eceasst}},
  copyrighturl	= {http://eceasst.cs.tu-berlin.de/index.php/eceasst/article/view/46}
		  ,
  pdf		= {http://www.brucker.ch/bibliography/download/2006/brucker.ea-semantic-2006-b.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-semantic-2006-b}
		  
}

@Article{	  brucker.ea:semantics:2009,
  author	= {Achim D. Brucker and Burkhart Wolff},
  title		= {Semantics, Calculi, and Analysis for Object-oriented
		  Specifications},
  journal	= j-acta-informatica,
  classification= {journal},
  areas		= {formal methods, software},
  keywords	= {\acs{uml}, \acs{ocl}, object-oriented specification,
		  refinement, formal methods},
  abstract	= {We present a formal semantics for an object-oriented
		  specification language. The formal semantics is presented
		  as a conservative shallow embedding in Isabelle/\acs{hol}
		  and the language is oriented towards \acs{ocl} formulae in
		  the context of \acs{uml} class diagrams. On this basis, we
		  formally derive several equational and tableaux calculi,
		  which form the basis of an integrated proof environment
		  including automatic proof support and support for the
		  analysis of this type of specifications.
		  
		  We show applications of our proof environment to data
		  refinement based on an adapted standard refinement notion.
		  Thus, we provide an integrated formal method for
		  refinement-based object-oriented development.},
  year		= 2009,
  language	= {USenglish},
  public	= {yes},
  issn		= {0001-5903},
  doi		= {10.1007/s00236-009-0093-8},
  categories	= {holocl},
  pages		= {255--284},
  month		= jul,
  volume	= 46,
  number	= 4,
  publisher	= pub-springer,
  pdf		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-semantics-2009.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-semantics-2009}
		  
}

###Article{	  brucker.ea:semantics:2009,
  author	= {Achim D. Brucker and Burkhart Wolff},
  title		= {Semantics, Calculi, and Analysis for Object-oriented
		  Specifications},
  journal	= j-acta-informatica,
  classification= {journal},
  areas		= {formal methods, software},
  keywords	= {\acs{uml}, \acs{ocl}, object-oriented specification,
		  refinement, formal methods},
  abstract	= {We present a formal semantics for an object-oriented
		  specification language. The formal semantics is presented
		  as a conservative shallow embedding in Isabelle/\acs{hol}
		  and the language is oriented towards \acs{ocl} formulae in
		  the context of \acs{uml} class diagrams. On this basis, we
		  formally derive several equational and tableaux calculi,
		  which form the basis of an integrated proof environment
		  including automatic proof support and support for the
		  analysis of this type of specifications.
		  
		  We show applications of our proof environment to data
		  refinement based on an adapted standard refinement notion.
		  Thus, we provide an integrated formal method for
		  refinement-based object-oriented development.},
  year		= 2009,
  language	= {USenglish},
  public	= {yes},
  issn		= {0001-5903},
  doi		= {10.1007/s00236-009-0093-8},
  categories	= {holocl},
  pages		= {255--284},
  month		= jul,
  volume	= 46,
  number	= 4,
  publisher	= pub-springer,
  pdf		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-semantics-2009.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-semantics-2009}
		  
}

@InProceedings{	  brucker.ea:summary-aachen:2013,
  author	= {Achim D. Brucker and Dan Chiorean and Tony Clark and
		  Birgit Demuth and Martin Gogolla and Dimitri Plotnikov and
		  Berhard Rumpe and Edward Willink and Burkhart Wolff},
  title		= {Report on the {Aachen} {\acs{ocl}} Meeting},
  booktitle	= {Workshop on \acs{ocl}, Model Constraint and Query
		  Languages (\acs{ocl} 2013)},
  year		= 2013,
  editor	= {Jordi Cabot and Martin Gogolla and Istvan Rath and Edward
		  Willink},
  abstract	= {As a continuation of the \acs{ocl} workshop during the
		  \acs{models} 2013 conference in October 2013, a number of
		  \acs{ocl} experts decided to meet in November 2013 in
		  Aachen for two days to discuss possible short term
		  improvements of \acs{ocl} for an upcoming \acs{omg} meeting
		  and to envision possible future long-term developments of
		  the language. This paper is a sort of ``minutes of the
		  meeting'' and intended to quickly inform the \acs{ocl}
		  community about the discussion topics.},
  classification= {invited},
  categories	= {holocl},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-summary-aachen-2013}
		  ,
  areas		= {software},
  public	= {yes},
  pdf		= {http://www.brucker.ch/bibliography/download/2013/brucker.ea-ocl-aachen-2013.pdf}
		  
}

@TechReport{	  brucker.ea:symbolic:2004,
  author	= {Achim D. Brucker and Burkhart Wolff},
  institution	= {\acs{eth} Zurich},
  language	= {USenglish},
  month		= jun,
  title		= {Symbolic Test Case Generation for Primitive Recursive
		  Functions},
  categories	= {testing,holtestgen},
  classification= {unrefereed},
  areas		= {formal methods, software},
  abstract	= {We present a method for the automatic generation of test
		  cases for \acs{hol} formulae containing primitive recursive
		  predicates. These test cases may be used for the animation
		  of specifications as well as for black-box-testing of
		  external programs.
		  
		  Our method is two-staged: first, the original formula is
		  partitioned into test cases by transformation into a
		  Horn-clause normal form (\acs{cnf}). Second, the test cases
		  are analyzed for ground instances satisfying the premises
		  of the clauses. Particular emphasis is put on the control
		  of test hypothesis' and test hierarchies to avoid
		  intractability.
		  
		  We applied our method to several examples, including
		  \acs{avl-}trees and the red-black implementation in the
		  standard library from \acs{sml}/\acs{nj}.},
  keywords	= {symbolic test case generations, black box testing, theorem
		  proving, Isabelle/\acs{hol}},
  year		= 2004,
  number	= 449,
  num_pages	= 21,
  pdf		= {http://www.brucker.ch/bibliography/download/2004/brucker.ea-symbolic-2004.pdf}
		  ,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-symbolic-2004}
		  
}

@InCollection{	  brucker.ea:symbolic:2005,
  abstract	= {We present a method for the automatic generation of test
		  cases for \acs{hol} formulae containing primitive recursive
		  predicates. These test cases can be used for the animation
		  of specifications as well as for black-box testing of
		  external programs. Our method is two-staged: first, the
		  original formula is partitioned into test cases by
		  transformation into a Horn-clause normal form (\acs{hcnf}).
		  Second, the test cases are analyzed for instances with
		  constant terms satisfying the premises of the clauses.
		  Particular emphasis is put on the control of test
		  hypotheses and test hierarchies to avoid intractability. We
		  applied our method to several examples, including
		  \acs{avl-}trees and the red-black tree implementation in
		  the standard library from \acs{sml}/\acs{nj}. },
  keywords	= {symbolic test case generations, black box testing, theorem
		  proving, Isabelle/\acs{hol} },
  location	= {Linz},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {Formal Approaches to Testing of Software},
  language	= {USenglish},
  pages		= {16--32},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 3395,
  isbn		= {3-540-25109-X},
  doi		= {10.1007/b106767},
  editor	= {Jens Grabowski and Brian Nielsen},
  pdf		= {http://www.brucker.ch/bibliography/download/2005/brucker.ea-symbolic-2005.pdf}
		  ,
  project	= {\acs{csfmdos}},
  title		= {Symbolic Test Case Generation for Primitive Recursive
		  Functions},
  classification= {workshop},
  areas		= {formal methods, software},
  categories	= {holtestgen},
  year		= 2004,
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-symbolic-2005}
		  
}

@Proceedings{	  brucker.ea:tap:2012,
  editor	= {Achim D. Brucker and Jacques Julliand},
  title		= {Tests and Proofs - 6th International Conference, \acs{tap}
		  2012, Praque, Czech Republic, Mai 31 -- June 1, 2012.
		  Proceedings},
  publisher	= pub-springer,
  areas		= {formal methods, software},
  series	= s-lncs,
  volume	= 7305,
  year		= 2012,
  isbn		= {978-3-642-21767-8},
  public	= {yes},
  doi		= {10.1007/978-3-642-30473-6},
  classification= {editor},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-tap-2012}
		  
}

@InCollection{	  brucker.ea:test-program-generation:2013,
  abstract	= {Certifications demonstrating that certain security or
		  safety requirements are met by a system are becoming
		  increasingly important for a wide range of products.
		  Certifying large systems like operating systems up to
		  Common Criteria \acs{eal} 4 is common practice today, and
		  higher certification levels are at the brink of becoming
		  reality.
		  
		  To reach \acs{eal} 7 one has to formally verify properties
		  on the specification as well as test the implementation
		  thoroughly. In this paper, we present a case study that
		  uses a formal model of a microprocessor for generat- ing
		  test programs. These test programs validate that a
		  microprocessor implements the specified instruction set
		  correctly.
		  
		  We built our case study on an existing model that was,
		  together with an operating system, developed in
		  Isabelle/\acs{hol}. We use \testgen, a model-based testing
		  environment which is an extension of Isabelle/\acs{hol}. We
		  develop a number of conformance test scenarios, where
		  processor models were used to synthesize test programs that
		  were run against real hardware in the loop. Our test case
		  generation approach directly benefits from the existing
		  models and formal proofs in Isabelle/\acs{hol}. },
  keywords	= {test program generation, symbolic test case generations,
		  black box testing, white box testing, theorem proving,
		  interactive testing},
  location	= {Budapest},
  author	= {Achim D. Brucker and Abderrahmane Feliachi and Yakoub
		  Nemouchi and Burkhart Wolff},
  booktitle	= {{\acs{tap}} 2013: Tests And Proofs},
  language	= {USenglish},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 7942,
  editor	= {Luca Vigan{\`o} and Margus Veanes},
  title		= {Test Program Generation for a Microprocessor: A
		  Case-Study},
  categories	= {holtestgen},
  classification= {conference},
  areas		= {hardware, formal methods},
  public	= {yes},
  year		= 2013,
  doi		= {10.1007/978-3-642-38916-0_5},
  pages		= {76--95},
  isbn		= {978-3-642-38915-3},
  pdf		= {http://www.brucker.ch/bibliography/download/2013/brucker.ea-test-program-generation-2013.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-test-program-generation-2013}
		  
}

@InCollection{	  brucker.ea:test-sequence:2007,
  abstract	= {\testgen is a specification and test-case generation
		  environment extending the interactive theorem prover
		  Isabelle/\acs{hol}. Its method is two-staged: first, the
		  original formula is partitioned into test cases by
		  transformation into a normal form. Second, the test cases
		  are analyzed for ground instances (the test data)
		  satisfying the constraints of the test cases. Particular
		  emphasis is put on the control of explicit test hypotheses
		  which can be proven over concrete programs.
		  
		  Although originally designed for black-box unit-tests,
		  \testgen's underlying logic and deduction engine is
		  powerful enough to be used in test-sequence generation, too.
		  
		  We develop the theory for test-sequence generation with
		  \testgen and describe its use in a substantial case-study
		  in the field of computer security, namely the black-box
		  test of configured firewalls. },
  keywords	= {security, model-based testing, specification-based
		  testing, firewall testing},
  location	= {Zurich},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {{\acs{tap}} 2007: Tests And Proofs},
  language	= {USenglish},
  publisher	= pub-springer,
  series	= s-lncs,
  number	= 4454,
  editor	= {Bertrand Meyer and Yuri Gurevich},
  project	= {\acs{csfmdos}},
  title		= {Test-Sequence Generation with {\testgen} -- With an
		  Application to Firewall Testing },
  categories	= {holtestgen},
  classification= {conference},
  areas		= {security, formal methods, software},
  public	= {yes},
  year		= 2007,
  doi		= {10.1007/978-3-540-73770-4_9},
  pages		= {149--168},
  isbn		= {978-3-540-73769-8},
  pdf		= {http://www.brucker.ch/bibliography/download/2007/brucker.ea-test-sequence-2007.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-test-sequence-2007}
		  
}

@InProceedings{	  brucker.ea:testing:2001,
  author	= {Achim D. Brucker and Burkhart Wolff},
  title		= {Testing Distributed Component Based Systems Using
		  {\acs{uml}/\acs{ocl}}},
  language	= {USenglish},
  booktitle	= {Informatik 2001},
  pages		= {608--614},
  year		= 2001,
  talk		= {talk:brucker.ea:testing:2001},
  editor	= {K. Bauknecht and W. Brauer and Th. M{\"u}ck},
  volume	= 1,
  number	= 157,
  series	= {Tagungsband der \acs{gi}/\acs{\"ocg} Jahrestagung},
  month		= nov,
  organization	= {{\"O}sterreichische Computer Gesellschaft},
  abstract	= {We present a pragmatic approach using formal methods to
		  increase the quality of distributed component based
		  systems: Based on \acs{uml} class diagrams annotated with
		  \acs{ocl} constraints, code for runtime checking of
		  components in \acs{j2ee}/\acs{ejb} is automatically
		  generated. Thus, a \acs{uml--}model for a component can be
		  used in a black--box test for the component. Further we
		  introduce different design patterns for EJBs, which are
		  motivated by different levels of abstraction, and show that
		  these patterns work smoothly together with our \acs{ocl}
		  constraint checking. A prototypic implementation of the
		  code generator, supporting our patterns with \acs{ocl}
		  support, has been integrated into a commercial software
		  development tool.},
  isbn		= {3-85403-157-2},
  pdf		= {http://www.brucker.ch/bibliography/download/2001/info2001.pdf}
		  ,
  categories	= {testing,holocl},
  classification= {workshop},
  areas		= {software},
  keywords	= {Keywords: \acs{ocl}, Constraint checking, \acs{ejb},
		  \acs{j2ee}, Design by Contract, Design pattern},
  extended	= {\cite{brucker.ea:checking:2001}.},
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-testing-2001}
		  
}

@Article{	  brucker.ea:theorem-prover:2012,
  author	= {Achim D. Brucker and Burkhart Wolff},
  journal	= j-fac,
  publisher	= pub-springer,
  language	= {USenglish},
  categories	= {holtestgen},
  title		= {On Theorem Prover-based Testing},
  year		= 2013,
  issn		= {0934-5043},
  pages		= {683--721},
  volume	= 25,
  number	= 5,
  classification= journal,
  areas		= {formal methods, software},
  public	= {yes},
  doi		= {10.1007/s00165-012-0222-y},
  keywords	= {test case generation, domain partitioning, test sequence,
		  theorem proving, \testgen},
  abstract	= {\testgen is a specification and test case generation
		  environment extending the interactive theorem prover
		  Isabelle/\acs{hol}. As such, \testgen allows for an
		  integrated workflow supporting interactive theorem proving,
		  test case generation, and test data generation.
		  
		  The \testgen method is two-staged: first, the original
		  formula is partitioned into test cases by transformation
		  into a normal form called test theorem. Second, the test
		  cases are analyzed for ground instances (the test data)
		  satisfying the constraints of the test cases. Particular
		  emphasis is put on the control of explicit test-hypotheses
		  which can be proven over concrete programs.
		  
		  Due to the generality of the underlying framework, our
		  system can be used for black-box unit, sequence, reactive
		  sequence and white-box test scenarios. Although based on
		  particularly clean theoretical foundations, the system can
		  be applied for substantial case-studies. },
  pdf		= {http://www.brucker.ch/bibliography/download/2012/brucker.ea-theorem-prover-2012.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-theorem-prover-2012}
		  
}

@InCollection{	  brucker.ea:transformation:2006,
  abstract	= {SecureUML is a security modeling language for formalizing
		  access control requirements in a declarative way. It is
		  equipped with a \\acs{uml} notation in terms of a
		  \\acs{uml} profile, and can be combined with arbitrary
		  design modeling languages. We present a semantics for
		  SecureUML in terms of a model transformation to standard
		  \acs{uml}/\acs{ocl}. The transformation scheme is used as
		  part of an implementation of a tool chain ranging from
		  front-end visual modeling tools over code-generators to the
		  interactive theorem proving environment \holocl. The
		  methodological consequences for an analysis of the
		  generated \\acs{ocl} formulae are discussed.},
  keywords	= {security, SecureUML, \acs{uml}, \acs{ocl}, \holocl,
		  model-transformation},
  location	= {Genova},
  author	= {Achim D. Brucker and J\"urgen Doser and Burkhart Wolff},
  booktitle	= {{MoDELS} 2006: Model Driven Engineering Languages and
		  Systems},
  language	= {USenglish},
  publisher	= pub-springer,
  talk		= {talk:brucker.ea:transformation:2006},
  series	= s-lncs,
  doi		= {10.1007/11880240_22},
  number	= 4199,
  pages		= {306--320},
  editor	= {Oscar Nierstrasz and Jon Whittle and David Harel and
		  Gianna Reggio},
  project	= {\acs{csfmdos}},
  title		= {A Model Transformation Semantics and Analysis Methodology
		  for {SecureUML}},
  categories	= {holocl},
  classification= {conference},
  areas		= {security, formal methods, software},
  file		= {http://www.brucker.ch/bibliography/download/2006/brucker.ea-transformation-2006-b.pdf}
		  ,
  filelabel	= {Extended Version},
  year		= 2006,
  public	= {yes},
  pdf		= {http://www.brucker.ch/bibliography/download/2006/brucker.ea-transformation-2006.pdf}
		  ,
  note		= {An extended version of this paper is available as
		  \acs{eth} Technical Report, no. 524.},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-transformation-2006}
		  
}

@TechReport{	  brucker.ea:transformation:2006-b,
  author	= {Achim D. Brucker and J\"urgen Doser and Burkhart Wolff},
  institution	= {\acs{eth} Zurich},
  language	= {USenglish},
  title		= {A Model Transformation Semantics and Analysis Methodology
		  for {SecureUML}},
  categories	= {holocl},
  classification= {unrefereed},
  areas		= {security, formal methods, software},
  abstract	= { SecureUML is a security modeling language for formalizing
		  access control requirements in a declarative way. It is
		  equipped with a \\acs{uml} notation in terms of a
		  \\acs{uml} profile, and can be combined with arbitrary
		  design modeling languages. We present a semantics for
		  SecureUML in terms of a model transformation to standard
		  \acs{uml}/\acs{ocl}. The transformation scheme is used as
		  part of an implementation of a tool chain ranging from
		  front-end visual modeling tools over code-generators to the
		  interactive theorem proving environment \holocl. The
		  methodological consequences for an analysis of the
		  generated \\acs{ocl} formulae are discussed.},
  keywords	= {security, SecureUML, \acs{uml}, \acs{ocl}, \holocl,
		  model-transformation},
  year		= 2006,
  number	= 524,
  public	= {yes},
  num_pages	= 18,
  pdf		= {http://www.brucker.ch/bibliography/download/2006/brucker.ea-transformation-2006-b.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-transformation-2006-b}
		  
}

@Article{	  brucker.ea:verification:2005,
  author	= {Achim D. Brucker and Burkhart Wolff},
  title		= {A Verification Approach for Applied System Security},
  journal	= j-sttt,
  year		= 2005,
  publisher	= pub-springer,
  pdf		= {http://www.brucker.ch/bibliography/download/2005/brucker.ea-verification-2005.pdf}
		  ,
  language	= {USenglish},
  keywords	= {verification, security, access control, refinement,
		  \acs{posix}, \acs{cvs}, Z },
  classification= {journal},
  areas		= {security, formal methods, software},
  issn		= {1433-2779},
  doi		= {10.1007/s10009-004-0176-3},
  volume	= 7,
  number	= 3,
  pages		= {233--247},
  abstract	= {We present a method for the security analysis of realistic
		  models over off-the-shelf systems and their configuration
		  by formal, machine-checked proofs. The presentation follows
		  a large case study based on a formal security analysis of a
		  \acs{cvs-}Server architecture.
		  
		  The analysis is based on an abstract architecture
		  (enforcing a role-based access control), which is refined
		  to an implementation architecture (based on the usual
		  discretionary access control provided by the \posix{}
		  environment). Both architectures serve as a skeleton to
		  formulate access control and confidentiality properties.
		  
		  Both the abstract and the implementation architecture are
		  specified in the language Z. Based on a logical embedding
		  of Z into Isabelle/\acs{hol}, we provide formal,
		  machine-checked proofs for consistency properties of the
		  specification, for the correctness of the refinement, and
		  for security properties.},
  public	= {yes},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-verification-2005}
		  
}

@Article{	  brucker.ea:verifying:2008,
  abstract	= {\testgen is a specification and test case generation
		  environment extending the interactive theorem prover
		  Isabelle/\acs{hol}. The \testgen method is two-staged:
		  first, the original formula, called \emph{test
		  specification}, is partitioned into \emph{test cases} by
		  transformation into a normal form called \emph{test
		  theorem}. Second, the test cases are analyzed for ground
		  instances (the \emph{test data}) satisfying the constraints
		  of the test cases. Particular emphasis is put on the
		  control of explicit test hypotheses which can be proven
		  over concrete programs.
		  
		  As such, explicit test hypotheses establish a logical link
		  between validation by test and by proof. Since \testgen
		  generates explicit test hypotheses and makes them amenable
		  to formal proof, the system is in a unique position to
		  explore the relations between them at an example.},
  keywords	= {symbolic test case generations, black box testing, theorem
		  proving, formal verification, Isabelle/\acs{hol}},
  location	= {Budapest, Hungary},
  author	= {Achim D. Brucker and Lukas Br{\"u}gger and Burkhart Wolff},
  journal	= j-entcs,
  volume	= 220,
  number	= 1,
  issn		= {1571-0661},
  note		= {Proceedings of the Fourth Workshop on Model Based Testing
		  (\acs{mbt} 2008)},
  publisher	= pub-elsevier,
  language	= {USenglish},
  editor	= {Bernd Finkbeiner and Yuri Gurevich and Alexander K.
		  Petrenko},
  title		= {Verifying Test-Hypotheses: An Experiment in Test and
		  Proof},
  categories	= {holtestgen},
  pages		= {15--27},
  classification= {workshop},
  areas		= {formal methods, software},
  year		= 2008,
  pdf		= {http://www.brucker.ch/bibliography/download/2008/brucker.ea-verifying-2008.pdf}
		  ,
  public	= {yes},
  doi		= {10.1016/j.entcs.2008.11.003},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-verifying-2008}
		  
}

@PhDThesis{	  brucker:interactive:2007,
  author	= {Achim D. Brucker},
  title		= {An Interactive Proof Environment for Object-oriented
		  Specifications},
  school	= {\acs{eth} Zurich},
  year		= 2007,
  public	= {yes},
  month		= mar,
  classification= {thesis},
  areas		= {formal methods, software},
  categories	= {holocl},
  keywords	= {\acs{ocl}, \acs{uml}, formal semantics, theorem proving,
		  Isabelle, \holocl},
  note		= {\acs{eth} Dissertation No. 17097.},
  abstract	= {We present a semantic framework for object-oriented
		  specification languages. We develop this framework as a
		  conservative shallow embedding in Isabelle/\acs{hol}. Using
		  only conservative extensions guarantees by construction the
		  consistency of our formalization. Moreover, we show how our
		  framework can be used to build an interactive proof
		  environment, called \holocl, for object-oriented
		  specifications in general and for \acs{uml}/\acs{ocl} in
		  particular.
		  
		  Our main contributions are an extensible encoding of
		  object-oriented data structures in \acs{hol}, a datatype
		  package for object-oriented specifications, and the
		  development of several equational and tableaux calculi for
		  object-oriented specifications. Further, we show that our
		  formal framework can be the basis of a formal
		  machine-checked semantics for \acs{ocl} that is compliant
		  to the \acs{ocl} 2.0 standard. },
  abstract_de	= {In dieser Arbeit wird ein semantisches Rahmenwerk f{\"u}r
		  objektorientierte Spezifikationen vorgestellt. Das
		  Rahmenwerk ist als konservative, flache Einbettung in
		  Isabelle/\acs{hol} realisiert. Durch die Beschr{\"a}nkung
		  auf konservative Erweiterungen kann die logische Konsistenz
		  der Einbettung garantiert werden. Das semantische
		  Rahmenwerk wird verwendet, um das interaktives Beweissystem
		  \holocl f{\"u}r objektorientierte Spezifikationen im
		  Allgemeinen und insbesondere f{\"u}r \acs{uml}/\acs{ocl} zu
		  entwickeln.
		  
		  Die Hauptbeitr{\"a}ge dieser Arbeit sind die Entwicklung
		  einer erweiterbaren Kodierung objektorientierter
		  Datenstrukturen in \acs{hol}, ein Datentyp-Paket f{\"u}r
		  objektorientierte Spezifikationen und die Entwicklung
		  verschiedener Kalk{\"u}le f{\"u}r objektorientierte
		  Spezifikationen. Zudem zeigen wir, wie das formale
		  Rahmenwerk verwendet werden kann, um eine formale,
		  maschinell gepr{\"u}fte Semantik f{\"u}r \acs{ocl}
		  anzugeben, die konform zum Standard f{\"u}r \acs{ocl} 2.0 ist.},
  pdf		= {http://www.brucker.ch/bibliography/download/2007/brucker-interactive-2007.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker-interactive-2007}
		  
}

###PhDThesis{	  brucker:interactive:2007,
  author	= {Achim D. Brucker},
  title		= {An Interactive Proof Environment for Object-oriented
		  Specifications},
  school	= {\acs{eth} Zurich},
  year		= 2007,
  public	= {yes},
  month		= mar,
  classification= {thesis},
  areas		= {formal methods, software},
  categories	= {holocl},
  keywords	= {\acs{ocl}, \acs{uml}, formal semantics, theorem proving,
		  Isabelle, \holocl},
  note		= {\acs{eth} Dissertation No. 17097.},
  abstract	= {We present a semantic framework for object-oriented
		  specification languages. We develop this framework as a
		  conservative shallow embedding in Isabelle/\acs{hol}. Using
		  only conservative extensions guarantees by construction the
		  consistency of our formalization. Moreover, we show how our
		  framework can be used to build an interactive proof
		  environment, called \holocl, for object-oriented
		  specifications in general and for \acs{uml}/\acs{ocl} in
		  particular.
		  
		  Our main contributions are an extensible encoding of
		  object-oriented data structures in \acs{hol}, a datatype
		  package for object-oriented specifications, and the
		  development of several equational and tableaux calculi for
		  object-oriented specifications. Further, we show that our
		  formal framework can be the basis of a formal
		  machine-checked semantics for \acs{ocl} that is compliant
		  to the \acs{ocl} 2.0 standard. },
  abstract_de	= {In dieser Arbeit wird ein semantisches Rahmenwerk f{\"u}r
		  objektorientierte Spezifikationen vorgestellt. Das
		  Rahmenwerk ist als konservative, flache Einbettung in
		  Isabelle/\acs{hol} realisiert. Durch die Beschr{\"a}nkung
		  auf konservative Erweiterungen kann die logische Konsistenz
		  der Einbettung garantiert werden. Das semantische
		  Rahmenwerk wird verwendet, um das interaktives Beweissystem
		  \holocl f{\"u}r objektorientierte Spezifikationen im
		  Allgemeinen und insbesondere f{\"u}r \acs{uml}/\acs{ocl} zu
		  entwickeln.
		  
		  Die Hauptbeitr{\"a}ge dieser Arbeit sind die Entwicklung
		  einer erweiterbaren Kodierung objektorientierter
		  Datenstrukturen in \acs{hol}, ein Datentyp-Paket f{\"u}r
		  objektorientierte Spezifikationen und die Entwicklung
		  verschiedener Kalk{\"u}le f{\"u}r objektorientierte
		  Spezifikationen. Zudem zeigen wir, wie das formale
		  Rahmenwerk verwendet werden kann, um eine formale,
		  maschinell gepr{\"u}fte Semantik f{\"u}r \acs{ocl}
		  anzugeben, die konform zum Standard f{\"u}r \acs{ocl} 2.0 ist.},
  pdf		= {http://www.brucker.ch/bibliography/download/2007/brucker-interactive-2007.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/brucker-interactive-2007}
		  
}

@InBook{	  brucker:nntp:1999,
  author	= {Achim D. Brucker},
  editor	= {Stefan Reinauer},
  title		= {Top 10 Themen Linux},
  chapter	= {\acs{nntp}: Das Usenet},
  publisher	= {Sybex Verlag GmbH},
  public	= {no},
  year		= 1999,
  isbn		= {3-8155-8001-3},
  language	= {german},
  myclassification={popular},
  areas		= {software},
  pages		= {180--201},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker-nntp-1999}
		  
}

@Article{	  brucker:securebpmn:2013,
  author	= {Achim D. Brucker},
  journal	= {it - Information Technology},
  publisher	= {Oldenbourg Wissenschaftsverlag},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker-securebpmn-2013}
		  ,
  language	= {USenglish},
  title		= {Integrating Security Aspects into Business Process
		  Models},
  title_de	= {Integration von Sicherheitsaspekten in
		  Gesch{\"a}ftsprozessmodelle},
  year		= 2013,
  volume	= 55,
  number	= 6,
  classification= journal,
  areas		= {security, software},
  public	= {yes},
  doi		= {10.1515/itit.2013.2004},
  keywords	= {Management of Computing and Information Systems,
		  SecureBPMN, \acs{bpmn}},
  abstract	= {Modern enterprise systems are often process-driven and,
		  thus, rely heavily on process-aware information systems. In
		  such systems, high-level process-models play an important
		  role both for communicating business requirements between
		  domain experts and system experts as well as basis for the
		  system implementation. Since several years, enterprise
		  system need to fulfil an increasing number of the security
		  and compliance requirements. Thus, there is an increasing
		  demand for integrating high-level security and compliance
		  requirements into process models, \ie, a common language
		  for domain experts, system experts, and security experts.
		  
		  We present a security modelling language, called
		  SecureBPMN, that can easily be integrated into business
		  process modelling languages. In this paper, we exemplary
		  integrate SecureBPMN into \acs{bpmn} and, thus, present a
		  common language for describing business process models
		  together with their security and compliance requirements.},
  abstract_de	= {Moderne Unternehmensanwendungen m{\"u}ssen die Unternehmen
		  dabei unterst{\"u}tzen, ihre Gesch{\"a}ftsprozesse
		  effizient auszuf{\"u}hren. In solchen Anwendungen spielen
		  abstrakte Gesch{\"a}ftsprozessmodelle eine zentrale Rolle.
		  Die Gesch{\"a}ftsprozessmodelle werden f{\"u}r die
		  Kommunikation zwischen Gesch{\"a}fts- und \acs{it-}Experten
		  genutzt und dienen dar{\"u}ber hinaus als Basis f{\"u}r die
		  Implementierung der Unternehmensanwendungen. Seit einigen
		  Jahren m{\"u}ssen Unternehmensanwendungen einer steigenden
		  Anzahl von Sicherheits- und Compliance-Anforderungen
		  gen{\"u}gen. Hieraus ergibt sich ein gesteigerte
		  Bed{\"u}rfnis nach der Integration von Sicherheits- und
		  Compliance-Anforderungen in die Gesch{\"a}ftsprozessmodelle.
		  
		  In diesem Artikel stellen wir die Modellierungssprache
		  SecureBPMN vor, welche es erlaubt, Sicherheitsanforderungen
		  im Kontext von Gesch{\"a}ftsprozessmodelle zu spezifizieren.},
  pdf		= {http://www.brucker.ch/bibliography/download/2013/brucker-securebpmn-2013.pdf}
		  ,
  note		= {Special Issue on ``Security in Business Processes.''}
}

@MastersThesis{	  brucker:verifikation:2000,
  bibkey	= {brucker:verifikation:2000},
  language	= {german},
  author	= {Achim D. Brucker},
  title		= {{Verifikation von Dividierern mit
		  Word-Level-Decision-Diagrams}},
  school	= {{\ALUF}},
  month		= apr,
  year		= 2000,
  public	= {yes},
  type		= {Diplomarbeit},
  keywords	= {formal verification, binary decision diagrams,
		  K*\acs{bmd}, \acs{bdd}, nonrestoring division},
  classification= {thesis},
  areas		= {formal methods, hardware},
  pdf		= {http://www.brucker.ch/bibliography/download/2000/diplomathesis.pdf}
		  ,
  abstract	= {Late detection of design errors typically results in
		  higher costs, therefore the importance of design
		  verification and validation increases. This was especially
		  shown in 1994 by the ``Pentium bug''. Since then the effort
		  put into the verification of arithmetic circuits,
		  particularly division, has increased.\\ In the area of the
		  hardware verification decision diagrams are the most
		  important data structures for the representation of boolean
		  functions. However, in 1998 was shown that the
		  representational power of any known decision diagram ist
		  too weak to efficiently represent division.\\ In this work
		  a new approach for the verification of divider circuits is
		  introduced, which by a transformation avoids the
		  representation of the division operation as decision
		  diagram. With this approach it was the first time possible
		  to verify the nonrestoring division automatically only by
		  the application of decision diagrams.},
  abstract_de	= {Da die sp{\"a}te Entdeckung von Fehlern in einem
		  Schaltkreisdesign hohe Kosten verursacht, nimmt die
		  Bedeutung der Verifikation und Validierung zu. Deutlich
		  wurde dies 1994 mit dem \glqq Pentium Bug\grqq. Seit dieser
		  Zeit werden verst{\"a}rkt Verfahren zur Verifikation von
		  arithmetischen Schaltkreisen, insbesondere der Division,
		  untersucht. \\ Im Bereich der Hardwareverifikation sind
		  Entscheidungsdiagramme die wichtigsten Datenstrukturen zur
		  Repr{\"a}sentation boolescher Funktionen. Allerdings konnte
		  1998 gezeigt werden, dass die Berechnungsst{\"a}rke der
		  bekannten Entscheidungsdiagramme nicht ausreicht, um die
		  Division effizient darstellen zu k{\"o}nnen.\\ In dieser
		  Arbeit wird ein neuer Ansatz zur Verifikation von
		  Dividiererschaltkreisen vorgestellt, bei dem durch eine
		  Transformation vermieden wird, die Division als
		  Entscheidungsdiagramm darstellen zu m{\"u}ssen. Mit diesem
		  Verfahren ist erstmals eine vollst{\"a}ndig automatische
		  Verifikation der nonrestoring Division nur durch den
		  Einsatz von Entscheidungsdiagrammen m{\"o}glich.},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker-verifikation-2000}
		  
}

@PhDThesis{	  bruegger:generation:2012,
  author	= {Lukas Br{\"u}gger},
  title		= {A Framework for Modelling and Testing of Security
		  Policies},
  school	= {\acs{eth} Zurich},
  year		= 2012,
  categories	= {holtestgen},
  note		= {\acs{eth} Dissertation No. 20513.},
  public	= yes,
  pdf		= {../projects/hol-testgen/http://www.brucker.ch/bibliography/download/bruegger-generation-2012.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/bruegger-generation-2012}
		  
}

@Article{	  church:types:1940,
  author	= {Church, Alonzo},
  title		= {A formulation of the simple theory of types},
  journal	= j-sl,
  year		= 1940,
  volume	= 5,
  number	= 2,
  month		= jun,
  pages		= {56--68},
  acknowledgement={brucker, 2007-04-23},
  bibkey	= {church:types:1940}
}

@InProceedings{	  compagna.ea:bp-compliance:2013,
  author	= {Luca Compagna and Pierre Guilleminot and Achim D.
		  Brucker},
  booktitle	= {\acs{ieee} Sixth International Conference on Software
		  Testing, Verification and Validation (\acs{icst})},
  language	= {USenglish},
  public	= {yes},
  classification= {conference},
  publisher	= pub-ieee,
  areas		= {formal methods, software, security},
  keywords	= {Validation, Security, Business Process Management},
  pages		= {455--462},
  title		= {Business Process Compliance via Security Validation as a
		  Service},
  editor	= {Manuel Oriol and John Penix},
  url		= {http://www.brucker.ch/bibliography/abstract/compagna.ea-bp-compliance-2013}
		  ,
  isbn		= {978-1-4673-5961-0},
  location	= {Luxembourg},
  year		= 2013,
  pdf		= {http://www.brucker.ch/bibliography/download/2013/compagna.ea-bp-compliance-2013.pdf}
		  ,
  abstract	= {Modern enterprise systems are often process-based, i. e.,
		  they allow for the direct execution of business processes
		  that are specified in a high-level language such as
		  \acs{bpmn}. Moreover, modern enterprises need to comply to
		  more and more security and compliance regulations. In this
		  paper, we present a service based, called Security
		  Validation as a Service (SVaaS) for validating the
		  compliance of the business processes (BPs) during
		  design-time. Basically, while modeling a \acs{bp} the
		  business analyst specifies as well the security and
		  compliance requirements the \acs{bp} should comply to. By
		  pressing a button, these requirements are validated and the
		  results are presented in a graphical format to the business
		  analysis. At the core of SVaaS lies a rigorous and
		  industrially viable approach in which the security
		  validation business logic is handled server-side (SVaaS
		  Server) in the Cloud, while the client-side user interface
		  that business analysts use is handled by a light-weight
		  (SVaaS Connector). As proof-of-concept we created a SVaaS
		  prototype in which the SVaaS Server is deployed on the
		  \acs{sap} NetWeaver Cloud and two SVaaS Connectors are
		  built to enable two well-known \acs{bpm} clients, \acs{sap}
		  NetWeaver \acs{bpm} and Activiti, to consume SVaaS against
		  industrial relevant BPs.}
}

@InProceedings{	  feliachi.ea:isabellecircus:2012,
  author	= {Abderrahmane Feliachi and Marie-Claude Gaudel and Burkhart
		  Wolff},
  title		= {Isabelle/Circus: A Process Specification and Verification
		  Environment},
  booktitle	= {\acs{vstte}},
  year		= 2012,
  pages		= {243--260},
  doi		= {10.1007/978-3-642-27705-4_20},
  pdf		= {http://www.lri.fr/~mcg/\acs{pdf}/\acs{vsste2012}.pdf},
  series	= s-lncs,
  public	= yes,
  categories	= {holtestgen},
  volume	= 7152,
  url		= {http://www.brucker.ch/bibliography/abstract/feliachi.ea-isabellecircus-2012}
		  
}

@Article{	  feliachi.ea:isabellecircus:2012-b,
  author	= {Abderrahmane Feliachi and Burkhart Wolff and Marie-Claude
		  Gaudel},
  title		= {Isabelle/Circus},
  journal	= {Archive of Formal Proofs},
  year		= 2012,
  url		= {http://www.brucker.ch/bibliography/abstract/feliachi.ea-isabellecircus-2012-b}
		  ,
  issn		= {2150-914x},
  categories	= {holtestgen},
  public	= yes
}

@PhDThesis{	  feliachi:semantics-based:2012,
  author	= {Abderrahmane Feliachi},
  title		= {Semantics-Based Testing for Circus},
  school	= {Universit\'e Paris Sud},
  year		= 2012,
  month		= dec,
  categories	= {holtestgen},
  public	= yes,
  url		= {http://www.brucker.ch/bibliography/abstract/feliachi-semantics-based-2012}
		  
}

@Proceedings{	  grumberg.ea:tools:2007,
  editor	= {Orna Grumberg and Michael Huth},
  title		= {Tools and Algorithms for the Construction and Analysis of
		  Systems, 13th International Conference, TACAS 2007, Held as
		  Part of the Joint European Conferences on Theory and
		  Practice of Software, ETAPS 2007 Braga, Portugal, March 24
		  - April 1, 2007, Proceedings},
  booktitle	= {TACAS},
  publisher	= pub-springer,
  address	= pub-springer:adr,
  series	= s-lncs,
  volume	= 4424,
  year		= 2007,
  isbn		= {978-3-540-71208-4}
}

@Proceedings{	  kaufmann.ea:interactive:2010,
  editor	= {Matt Kaufmann and Lawrence C. Paulson},
  title		= {Interactive Theorem Proving, First International
		  Conference, ITP 2010, Edinburgh, UK, July 11-14, 2010.
		  Proceedings},
  booktitle	= {ITP},
  publisher	= pub-springer,
  series	= s-lncs,
  volume	= 6172,
  year		= 2010,
  isbn		= {978-3-642-14051-8},
  doi		= {10.1007/978-3-642-14052-5}
}

@InCollection{	  kohler.ea:caching:2010,
  author	= {Mathias Kohler and Achim D. Brucker},
  booktitle	= {International Workshop on Security Measurements and
		  Metrics (MetriSec)},
  language	= {USenglish},
  title		= {Caching Strategies: An Empirical Evaluation},
  year		= 2010,
  copyright	= {\acs{acm}},
  copyrighturl	= {http://dl.acm.org/authorize?399969},
  classification= workshop,
  areas		= {security, software,bpm},
  public	= {yes},
  pdf		= {http://www.brucker.ch/bibliography/download/2010/kohler.ea-caching-2010.pdf}
		  ,
  abstract	= {Modern enterprise systems comprise a fine-grained
		  enforcement of complex access control policies.
		  Consequently, the efficient evaluation of security policies
		  is a significant factor for the overall system performance.
		  Moreover, modern enterprise systems are inherently based on
		  process and workflow models. These models enable new
		  approaches for improving the performance of security
		  evaluations.
		  
		  Caching is widely used for improving the performance and
		  the reliability of systems. The dynamic nature of today's
		  workflow systems, both in terms of changing workflows and
		  in terms of dynamic security policies impose particular
		  challenges on the caching of access control decisions.
		  
		  We present a caching strategy that exploits business
		  process models for avoiding cache misses. Moreover, we
		  provide a detailed performance analysis of different
		  caching strategies for static and dynamic aspects of access
		  control policies, providing the required metrics for
		  informed design decisions.},
  isbn		= {978-1-4503-0340-8},
  pages		= {1--8},
  location	= {Bolzano, Italy},
  doi		= {10.1145/1853919.1853930},
  publisher	= pub-acm,
  url		= {http://www.brucker.ch/bibliography/abstract/kohler.ea-caching-2010}
		  
}

@InCollection{	  kohler.ea:proactive:2009,
  author	= {Mathias Kohler and Achim D. Brucker and Andreas Schaad},
  title		= {{ProActive} {Caching}: Generating Caching Heuristics for
		  Business Process Environments},
  booktitle	= {International Conference on Computational Science and
		  Engineering (\acs{cse})},
  doi		= {10.1109/CSE.2009.177},
  pages		= {207--304},
  volume	= 3,
  publisher	= pub-ieee,
  location	= {Vancouver, Kandada},
  year		= 2009,
  month		= aug,
  classification= {conference},
  abstract	= {Today's complex and multi-layered enterprise systems
		  demand fine-grained access control mechanisms supporting
		  dynamic security policies for large and distributed
		  repositories. Thus, the efficient evaluation of security
		  policies becomes an important factor for the overall system
		  performance, specifically with respect to systems with a
		  high degree of user interaction like workflow systems.
		  
		  We propose ProActive Caching, a two-phased caching
		  approach: in an offline phase, we automatically determine a
		  workflow-specific heuristic for pre-computing cache
		  entries. In an online phase, we use the previously
		  determined heuristic for the cache management. The latter
		  includes also the pre-computation of cache entries which
		  already provides a performance improvement while evaluating
		  a policy object for the first time. In this paper, we
		  present a method for the automatic generation of a workflow
		  specific caching heuristic, i.e., the offline phase.},
  areas		= {security,bpm},
  keywords	= {access control, proactive caching, process models},
  public	= {yes},
  pdf		= {http://www.brucker.ch/bibliography/download/2009/kohler.ea-proactive-2009.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/kohler.ea-proactive-2009}
		  
}

@InProceedings{	  kosiuczenko:specification:2006,
  author	= {Piotr Kosiuczenko},
  title		= {Specification of Invariability in \acs{ocl}},
  pages		= {676--691},
  doi		= {10.1007/11880240_47},
  abstract	= {The paradigm of contractual specification provides a
		  transparent way of specifying systems. It clearly
		  distinguishes between client and implementer obligations.
		  One of the best known languages used for this purpose is
		  OCL. Nevertheless, OCL does not provide primitives for a
		  compact specification of what remains unchanged when a
		  method is executed. In this paper, problems with specifying
		  invariability are listed and some weaknesses of existing
		  solutions are pointed out. The question of specifying
		  invariability in OCL is studied and a simple but expressive
		  and flexible extension is proposed. It is shown that this
		  extension has a simple OCL based semantics.}
}

@InProceedings{	  krieger.ea:generative:2010,
  author	= {Matthias P. Krieger and Alexander Knapp and Burkhart
		  Wolff},
  title		= {Generative Programming and Component Engineering},
  booktitle	= {International Conference on Generative Programming and
		  Component Engineering (GPCE 2010)},
  month		= oct,
  location	= {Eindhoven, The Netherlands, October 10-13, 2010},
  year		= 2010,
  pages		= {53--62},
  ee		= {http://doi.acm.org/10.1145/1868294.1868303},
  editor	= {Eelco Visser and Jaakko J{\"a}rvi},
  publisher	= {ACM},
  isbn		= {978-1-4503-0154-1},
  abstract	= {Operation contracts consisting of pre- and postconditions
		  are a well-known means of specifying operations. In this
		  paper we deal with the problem of operation contract
		  simulation, i.e., determining operation results satisfying
		  the postconditions based on input data supplied by the
		  user; simulating operation contracts is an important
		  technique for requirements validation and prototyping.
		  Current approaches to operation contract simulation exhibit
		  poor performance for large sets of input data or require
		  additional guidance from the user. We show how these
		  problems can be alleviated and describe an efficient as
		  well as fully automatic approach. It is implemented in our
		  tool OCLexec that generates from UML/OCL operation
		  contracts corresponding Java implementations which call a
		  constraint solver at runtime. The generated code can serve
		  as a prototype. A case study demonstrates that our approach
		  can handle problem instances of considerable size.}
}

@Article{	  krieger.ea:objective-functions:2011,
  abstract	= {We explore the potential of adding objective functions to
		  \acs{ocl} operation contracts. If an operation contract
		  includes an objective function, the operation has the
		  obligation to yield results that make the objective
		  function assume an optimal value. Thus, an objective
		  function expresses a preference among the possible
		  operation results that conform to the postconditions of the
		  operation contract and any class invariants. Objective
		  functions strictly increase the expressiveness of \acs{ocl}
		  operation contracts. While objective functions arise
		  naturally in application domains like operations research,
		  we argue that objective functions are a useful
		  general-purpose specification instrument and discuss
		  several application examples. As tool support for operation
		  contracts with objective functions, we present an animator
		  for \acs{ocl} operation contracts with optimization
		  capabilities. We ensure tool interoperability by specifying
		  objective functions in a \acs{uml} profile.},
  author	= {Matthias P. Krieger and Achim D. Brucker},
  title		= {Extending \acs{ocl} Operation Contracts with Objective
		  Functions},
  language	= {USenglish},
  public	= {yes},
  categories	= {holocl},
  classification= {workshop},
  areas		= {formal methods, software},
  year		= 2011,
  keywords	= {\acs{ocl}, \acs{uml}, objective functions},
  editor	= {Jordi Cabot and Tony Clark and Manuel Clavel and Martin
		  Gogolla},
  issn		= {1863-2122},
  copyright	= {\acs{eceasst}},
  copyrighturl	= {http://journal.ub.tu-berlin.de/eceasst/article/view/662},
  journal	= j-eceasst,
  volume	= 44,
  volumetitle	= {Proceedings of the Workshop on \acs{ocl} and Textual
		  Modelling (\acs{ocl} 2011)},
  pdf		= {http://www.brucker.ch/bibliography/download/2011/krieger.ea-objective-functions-2011.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/krieger.ea-objective-functions-2011}
		  
}

@PhDThesis{	  krieger:generation:2011,
  author	= {Matthias P. Krieger},
  title		= {Test Generation and Animation Based on Object-Oriented
		  Specifications},
  school	= {University Paris-Sud \acs{xi}},
  year		= 2011,
  categories	= {holtestgen},
  pdf		= {../projects/hol-testgen/http://www.brucker.ch/bibliography/download/krieger-generation-2011.pdf}
		  ,
  public	= yes,
  url		= {http://www.brucker.ch/bibliography/abstract/krieger-generation-2011}
		  
}

@InCollection{	  marienfeld.ea:usdl-security:2012,
  author	= {Florian Marienfeld and Edzard H{\"o}fig and Michele Bezzi
		  and Matthias Fl{\"u}gge and Jonas Pattberg and Gabriel
		  Serme and Achim D. Brucker and Philip Robinson and Stephen
		  Dawson and Wolfgang Theilmann},
  editor	= {Alistair Barros and Daniel Oberle},
  booktitle	= {Handbook of Service Description: {\acs{usdl}} and its
		  Methods},
  title		= {Service levels, Security, and Trust},
  chapter	= 12,
  isbn		= {978-1-4614-1864-1},
  pages		= {295--326},
  publisher	= pub-springer-ny,
  year		= 2012,
  doi		= {10.1007/978-1-4614-1864-1_12},
  classification= {invited},
  areas		= {security, software},
  public	= {yes},
  pdf		= {http://www.brucker.ch/bibliography/download/2012/marienfeld.ea-usdl-security-2012.pdf}
		  ,
  abstract	= {This chapter covers the scientific background for the
		  Service Level Module of the Unified Service Description
		  Language (\acs{usdl}). In addition to general service level
		  concepts, we expand on two specific service level fields:
		  security and trust. For that end we first review the state
		  of the art in service level modeling, then we explain the
		  design of the Service Level Module and position it among
		  the rest of \acs{usdl}. For security, two possible
		  perspectives, a high level business view and a low level
		  engineering approach, are introduced. With regards to
		  trust, \acs{usdl} is suitable to specify how a service can
		  be rated by its consumers and to ensure that ratings of
		  competing services are comparable, and hence to determine
		  trustworthiness. Additionally, we present a description of
		  non-security-related elements that can be exploited for
		  trust estimation. },
  url		= {http://www.brucker.ch/bibliography/abstract/marienfeld.ea-usdl-security-2012}
		  
}

@InProceedings{	  monakova.ea:monitoring:2012,
  author	= {Ganna Monakova and Cristina Severin and Achim D. Brucker
		  and Ulrich Flegel and Andreas Schaad},
  title		= {Monitoring Security and Safety of Assets in Supply
		  Chains},
  language	= {USenglish},
  booktitle	= {Future Security},
  pages		= {9--20},
  year		= 2012,
  doi		= {10.1007/978-3-642-33161-9_3},
  editor	= {Nils Aschenbruck and Peter Martini and Michael Meier and
		  Jens T{\"o}lle},
  volume	= 318,
  series	= {Communications in Computer and Information Science},
  abstract	= {In the today's world of the global economy supply chains
		  become more and more complicated. Widely distributed supply
		  chains open more possibilities for attacks on both \acs{it}
		  as well physical level. The potential threats can span over
		  multiple supply chains. For example, if the same truck is
		  used to transport chemicals and then the same truck is used
		  to transport food, a contamination threat arises that
		  neither of the supply chains can detect when analysed
		  independently.
		  
		  In this paper, we present a tool-supported framework that
		  extends modelling and execution of supply chains processes
		  with specification, execution and monitoring of the
		  security and safety constraints that are used to protect
		  supply chain assets. The tool allows to detect not only
		  threats scoped to a single supply chain, but cross-cutting
		  threats that can only be detected through analysis of the
		  whole system.},
  isbn		= {978-3-642-33160-2},
  pdf		= {http://www.brucker.ch/bibliography/download/2012/monakova.ea-monitoring-2012.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/monakova.ea-monitoring-2012}
		  ,
  publisher	= pub-springer,
  classification= {conference},
  areas		= {security,bpm},
  keywords	= {Supply Chain Security, Monitoring, Resource Modeling},
  public	= {yes}
}

@InProceedings{	  monakova.ea:securing:2012,
  author	= {Ganna Monakova and Achim D. Brucker and Andreas Schaad},
  title		= {Security and Safety of Assets in Business Processes},
  booktitle	= {\acs{acm} Symposium on Applied Computing (\acs{sac})},
  year		= 2012,
  url		= {http://www.brucker.ch/bibliography/abstract/monakova.ea-securing-2012}
		  ,
  classification= {conference},
  areas		= {software, security,bpm},
  publisher	= pub-acm,
  pages		= {1667--1673},
  doi		= {10.1145/2245276.2232045},
  isbn		= {978-1-4503-0857-1},
  location	= {Trento, Italy},
  copyright	= {\acs{acm}},
  keywords	= {\acs{bpmn}, monitoring, resource modeling, safety,
		  security},
  copyrighturl	= {http://dl.acm.org/authorize?},
  public	= {yes},
  abstract	= {Business processes and service compositions are defined
		  independent of the realizing systems. The visualization of
		  security and safety constraints on the business process
		  model level appears to be a promising approach to system
		  independent specification of the security and safety
		  requirements. Such requirements can be realized through
		  business process annotation and used for communication or
		  documentation, but they also can have an execution
		  semantics that allows for automating the security and
		  safety controls. In this paper, we present a tool-supported
		  framework that extends modeling and execution of business
		  processes with specification, execution and monitoring of
		  the security and safety constraints that are used to
		  protect business assets. We illustrate our approach on
		  basis of a case study modeling a supply chain for
		  perishable goods.},
  pdf		= {http://www.brucker.ch/bibliography/download/2012/monakova.ea-securing-2012.pdf}
		  
}

@InProceedings{	  moura.ea:z3:2008,
  author	= {Leonardo Mendon\c{c}a de Moura and Nikolaj Bj{\o}rner},
  title		= {Z3: An Efficient \acs{smt} Solver},
  booktitle	= {TACAS},
  year		= 2008,
  pages		= {337--340},
  doi		= {10.1007/978-3-540-78800-3_24},
  abstract	= {Satisfiability Modulo Theories (SMT) problem is a decision
		  problem for logical first order formulas with respect to
		  combinations of background theories such as: arithmetic,
		  bit-vectors, arrays, and uninterpreted functions. Z3 is a
		  new and efficient SMT Solver freely available from
		  Microsoft Research. It is used in various software
		  verification and analysis applications. },
  crossref	= {ramakrishnan.ea:tools:2008}
}

@Book{		  nipkow.ea:isabelle:2002,
  author	= {Tobias Nipkow and Lawrence C. Paulson and Markus Wenzel},
  title		= {Isabelle/\acs{hol}---A Proof Assistant for Higher-Order
		  Logic},
  publisher	= pub-springer,
  address	= pub-springer:adr,
  series	= s-lncs,
  volume	= 2283,
  doi		= {10.1007/3-540-45949-9},
  abstract	= {This book is a self-contained introduction to interactive
		  proof in higher-order logic (\acs{hol}), using the proof
		  assistant Isabelle2002. It is a tutorial for potential
		  users rather than a monograph for researchers. The book has
		  three parts.
		  
		  1. Elementary Techniques shows how to model functional
		  programs in higher-order logic. Early examples involve
		  lists and the natural numbers. Most proofs are two steps
		  long, consisting of induction on a chosen variable followed
		  by the auto tactic. But even this elementary part covers
		  such advanced topics as nested and mutual recursion. 2.
		  Logic and Sets presents a collection of lower-level tactics
		  that you can use to apply rules selectively. It also
		  describes Isabelle/\acs{hol}'s treatment of sets, functions
		  and relations and explains how to define sets inductively.
		  One of the examples concerns the theory of model checking,
		  and another is drawn from a classic textbook on formal
		  languages. 3. Advanced Material describes a variety of
		  other topics. Among these are the real numbers, records and
		  overloading. Advanced techniques are described involving
		  induction and recursion. A whole chapter is devoted to an
		  extended example: the verification of a security protocol. },
  year		= 2002,
  acknowledgement={brucker, 2007-02-19},
  bibkey	= {nipkow.ea:isabelle:2002},
  tags		= {noTAG},
  clearance	= {unclassified},
  timestap	= {2008-05-26}
}

@Booklet{	  omg:ocl:1997,
  bibkey	= {omg:ocl:1997},
  key		= omg,
  abstract	= {This document introduces and defines the Object Constraint
		  Language (\acs{ocl}), a formal language to express side
		  effect-free constraints. Users of the Unified Modeling
		  Language and other languages can use \acs{ocl} to specify
		  constraints and other expressions attached to their models.
		  \acs{ocl} was used in the \acs{uml} Semantics document to
		  specify the well-formedness rules of the \acs{uml}
		  metamodel. Each well-formedness rule in the static
		  semantics sections in the \acs{uml} Semantics document
		  contains an \acs{ocl} expression, which is an invariant for
		  the involved class. The grammar for \acs{ocl} is specified
		  at the end of this document. A parser generated from this
		  grammar has correctly parsed all the constraints in the
		  \acs{uml} Semantics document, a process which improved the
		  correctness of the specifications for \acs{ocl} and \acs{uml}.},
  institution	= omg,
  language	= {USenglish},
  month		= sep,
  note		= {Available as \acs{omg} document
		  \href{http://www.omg.org/cgi-bin/doc?ad/97-08-08}
		  {ad/97-08-08}},
  keywords	= {\acs{uml}, OCL},
  topic		= {formalism},
  public	= {yes},
  title		= {Object Constraint Language Specification (Version 1.1)},
  year		= 1997,
  acknowledgement={brucker, 2007-04-23}
}

@Booklet{	  omg:ocl:2003,
  bibkey	= {omg:ocl:2003},
  key		= omg,
  abstract	= {This document introduces and defines the Object Constraint
		  Language (OCL), a formal language to express side
		  effect-free constraints. Users of the Unified Modeling
		  Language and other languages can use OCL to specify
		  constraints and other expressions attached to their models.
		  OCL was used in the \acs{uml} Semantics document to specify
		  the well-formedness rules of the \acs{uml} metamodel. Each
		  well-formedness rule in the static semantics sections in
		  the \acs{uml} Semantics document contains an OCL
		  expression, which is an invariant for the involved class.
		  The grammar for OCL is specified at the end of this
		  document. A parser generated from this grammar has
		  correctly parsed all the constraints in the \acs{uml}
		  Semantics document, a process which improved the
		  correctness of the specifications for OCL and \acs{uml}.},
  publisher	= omg,
  language	= {USenglish},
  month		= oct,
  keywords	= {\acs{uml}, OCL},
  topic		= {formalism},
  public	= {yes},
  note		= {Available as \acs{omg} document
		  \href{http://www.omg.org/cgi-bin/doc?ptc/03-10-14}
		  {ptc/03-10-14}},
  title		= {\acs{uml} 2.0 \acs{ocl} Specification},
  year		= 2003,
  acknowledgement={brucker, 2007-04-23}
}

@Booklet{	  omg:ocl:2006,
  bibkey	= {omg:ocl:2006},
  key		= omg,
  abstract	= {This document introduces and defines the Object Constraint
		  Language (OCL), a formal language to express side
		  effect-free constraints. Users of the Unified Modeling
		  Language and other languages can use OCL to specify
		  constraints and other expressions attached to their models.
		  OCL was used in the \acs{uml} Semantics document to specify
		  the well-formedness rules of the \acs{uml} metamodel. Each
		  well-formedness rule in the static semantics sections in
		  the \acs{uml} Semantics document contains an OCL
		  expression, which is an invariant for the involved class.
		  The grammar for OCL is specified at the end of this
		  document. A parser generated from this grammar has
		  correctly parsed all the constraints in the \acs{uml}
		  Semantics document, a process which improved the
		  correctness of the specifications for OCL and \acs{uml}.},
  publisher	= omg,
  language	= {USenglish},
  month		= apr,
  keywords	= {\acs{uml}, OCL},
  topic		= {formalism},
  note		= {Available as \acs{omg} document
		  \href{http://www.omg.org/cgi-bin/doc?formal/06-05-01}
		  {formal/06-05-01}},
  public	= {yes},
  title		= {\acs{uml} 2.0 \acs{ocl} Specification},
  year		= 2006,
  acknowledgement={brucker, 2007-04-23}
}

@Booklet{	  omg:ocl:2012,
  bibkey	= {omg:ocl:2012},
  key		= omg,
  abstract	= {This document introduces and defines the Object Constraint
		  Language (OCL), a formal language to express side
		  effect-free constraints. Users of the Unified Modeling
		  Language and other languages can use OCL to specify
		  constraints and other expressions attached to their models.
		  OCL was used in the \acs{uml} Semantics document to specify
		  the well-formedness rules of the \acs{uml} metamodel. Each
		  well-formedness rule in the static semantics sections in
		  the \acs{uml} Semantics document contains an OCL
		  expression, which is an invariant for the involved class.
		  The grammar for OCL is specified at the end of this
		  document. A parser generated from this grammar has
		  correctly parsed all the constraints in the \acs{uml}
		  Semantics document, a process which improved the
		  correctness of the specifications for OCL and \acs{uml}.},
  publisher	= omg,
  language	= {USenglish},
  month		= feb,
  keywords	= {\acs{uml}, OCL},
  topic		= {formalism},
  note		= {Available as \acs{omg} document
		  \href{http://www.omg.org/cgi-bin/doc?formal/2012-01-01}
		  {formal/2012-01-01}},
  public	= {yes},
  title		= {\acs{uml} 2.3.1 \acs{ocl} Specification},
  year		= 2012,
  acknowledgement={brucker, 2012-08-01}
}

@InProceedings{	  probst.ea:soknos:2010,
  title		= {{SoKNOS} -- {I}nformationsdienste f{\"u}r das
		  {K}atastrophenmanagement},
  title_en	= {{SoKNOS} -- Information Services Supporting Disaster
		  Management},
  author	= {Florian Probst and Heiko Paulheim and Achim D. Brucker and
		  Stefan Schulte},
  year		= 2010,
  booktitle	= {\acs{vde-}Kongress 2010 -- \acs{e-}Mobility},
  month		= nov,
  location	= {Congress Center Leipzig},
  isbn		= {978-3-8007-3304-0},
  classification= {invited},
  areas		= {software},
  public	= {yes},
  language	= {german},
  abstract	= {Dieser Beitrag gibt einen {\"U}berblick {\"u}ber das vom
		  \acs{bmbf} gef{\"o}rderte Forschungsprojekt SoKNOS
		  (Service-orientierte ArchiteKturen zur Unterst{\"u}tzung
		  von Netzwerken im Rahmen {\"O}ffentlicher Sicherheit). Im
		  SoKNOS Projekt wurden Konzepte entwickelt, die beteiligten
		  Organisationen im Umfeld {\"o}ffentlicher Sicherheit im
		  Katastrophenfall darin unterst{\"u}tzen, schnell und sicher
		  agieren zu k{\"o}nnen. Dies beinhaltet unter anderem neue
		  Methoden zur flexiblen Integration heterogener
		  Informationen und Systeme, zur situations- und
		  benutzergerechten Darstellung und Auswertung dieser
		  Informationen, zum teilautomatisierten Austausch relevanter
		  Nachrichten, zur Kooperation zwischen Organisationen und
		  zum Dom{\"a}nen-spezifischen Design von
		  \acs{it-}Sicherheitsmechanismen. In SoKNOS wurden die
		  Forschungsbereiche \acs{it-}Sicherheit, Service-orientierte
		  Architekturen (\acs{soa}), Arbeitsplatz der Zukunft und
		  moderne Benutzerschnittstellen, Integration Geographischer
		  Informationssysteme (\acs{gis}), sowie semantische
		  Technologien adressiert. Im Folgenden werden exemplarisch
		  Ergebnisse vorgestellt, welche durch die Kapselung
		  einzelner Systemfunktionen in Dienste dazu beitragen, das
		  Katastrophenmanagement flexibler und modularer zu gestalten.},
  abstract_en	= {In this paper, we provide an overview of the research
		  project SoKNOS (Service-Oriented ArchiteCtures Supporting
		  Networks of Public Security) which was funded by the German
		  Federal Ministery of Education and Research (\acs{bmbf}).
		  The SoKNOS project developed concepts for \acs{it} systems
		  supporting both public and private organizations in
		  effectively and safely managing disasters and large
		  incidents. This includes, among other things, the
		  development of new methods for the flexible integration of
		  heterogeneous information sources and legacy systems, the
		  situation- and user-oriented presentation and analysis of
		  the integrated information, the efficient exchange of
		  information, and the efficient and secure cooperation
		  between different organizations. SoKNOS particularly
		  addressed the research areas \acs{it} security, ser-
		  vice-oriented architectures (\acs{soa}), workplace of the
		  future and modern user interface, integration of geographic
		  information systems (\acs{gis}), and semantic technologies.
		  In this paper, we will present exemplary results that, by
		  providing an encapsulation of system functions into
		  services, increase the modularity and flexibility of future
		  disaster management solutions.},
  pdf		= {http://www.brucker.ch/bibliography/download/2010/probst.ea-soknos-2010.pdf}
		  ,
  publisherurl	= {http://www.vde-verlag.de/proceedings-de/453304016.html},
  url		= {http://www.brucker.ch/bibliography/abstract/probst.ea-soknos-2010}
		  
}

@Proceedings{	  ramakrishnan.ea:tools:2008,
  editor	= {C. R. Ramakrishnan and Jakob Rehof},
  title		= {Tools and Algorithms for the Construction and Analysis of
		  Systems, 14th International Conference, TACAS 2008, Held as
		  Part of the Joint European Conferences on Theory and
		  Practice of Software, ETAPS 2008, Budapest, Hungary, March
		  29-April 6, 2008. Proceedings},
  booktitle	= {TACAS},
  publisher	= pub-springer,
  address	= pub-springer:adr,
  series	= s-lncs,
  volume	= 4963,
  year		= 2008,
  isbn		= {978-3-540-78799-0}
}

@PhDThesis{	  richters:precise:2002,
  author	= {Mark Richters},
  title		= {A Precise Approach to Validating {\acs{uml}} Models and
		  {\acs{ocl}} Constraints},
  school	= {Universit{\"a}t Bremen},
  year		= 2002,
  address	= {Logos Verlag, Berlin, \acs{biss} Monographs, No. 14},
  isbn		= {3-89722-842-4},
  abstract	= {We present a precise approach that allows an analysis and
		  validation of \acs{uml} models and OCL constraints. We
		  focus on models and constraints specified in the analysis
		  and early design stage of a software development process.
		  For this purpose, a suitable subset of \acs{uml}
		  corresponding to information that is usually represented in
		  class diagrams is identified and formally defined. This
		  basic modeling language provides a context for all OCL
		  constraints. We define a formal syntax and semantics of OCL
		  types, operations, expressions, invariants, and
		  pre-/postconditions. We also give solutions for problems
		  with the current OCL definition and discuss possible
		  extensions. A metamodel for OCL is introduced that defines
		  the abstract syntax of OCL expressions and the structure of
		  types and values. The metamodel approach allows a seamless
		  integration with the \acs{uml} metamodeling architecture
		  and makes the benefits of a precise OCL definition easier
		  accessible. The OCL metamodel also allows to define
		  context-sensitive conditions for well-formed OCL
		  expressions more precisely. These conditions can now be
		  specified with OCL whereas they previously were specified
		  only informally. In order to demonstrate the practical
		  applicability of our work, we have realized substantial
		  parts of it in a tool supporting the validation of models
		  and constraints. Design specifications can be ``executed''
		  and animated thus providing early feedback in an iterative
		  development process. Our approach offers novel ways for
		  checking user data against specifications, for automating
		  test procedures, and for checking CASE tools for standards
		  conformance. Therefore, this work contributes to the goal
		  of improving the overall quality of software systems by
		  combining theoretical and practical techniques.},
  acknowledgement={brucker, 2007-04-23}
}

@InProceedings{	  torlak.ea:kodkod:2007,
  author	= {Emina Torlak and Daniel Jackson},
  title		= {Kodkod: A Relational Model Finder},
  booktitle	= {TACAS},
  year		= 2007,
  pages		= {632--647},
  doi		= {10.1007/978-3-540-71209-1_49},
  crossref	= {grumberg.ea:tools:2007},
  abstract	= {The key design challenges in the construction of a
		  SAT-based relational model finder are described, and novel
		  techniques are proposed to address them. An efficient model
		  finder must have a mechanism for specifying partial
		  solutions, an effective symmetry detection and breaking
		  scheme, and an economical translation from relational to
		  boolean logic. These desiderata are addressed with three
		  new techniques: a symmetry detection algorithm that works
		  in the presence of partial solutions, a sparse-matrix
		  representation of relations, and a compact representation
		  of boolean formulas inspired by boolean expression diagrams
		  and reduced boolean circuits. The presented techniques have
		  been implemented and evaluated, with promising results.}
}

@Article{	  wahler.ea:efficient:2010,
  author	= {Michael Wahler and David Basin and Achim D. Brucker and
		  Jana Koehler},
  title		= {Efficient Analysis of Pattern-Based Constraint
		  Specifications},
  journal	= j-sosym,
  classification= {journal},
  publisher	= pub-springer,
  areas		= {formal methods, software},
  keywords	= {\acs{uml}, \acs{ocl}, Constraints, Patterns, Consistency},
  year		= 2010,
  abstract	= {Precision and consistency are important prerequisites for
		  class models to conform to their intended domain semantics.
		  Precision can be achieved by augmenting models with design
		  constraints and consistency can be achieved by avoiding
		  contradictory constraints. However, there are different
		  views of what constitutes a contradiction for design
		  constraints. Moreover, state-of-the-art analysis approaches
		  for proving constrained models consistent either scale
		  poorly or require the use of interactive theorem proving.
		  In this paper, we present a heuristic approach for
		  efficiently analyzing constraint specifications built from
		  constraint patterns. This analysis is based on precise
		  notions of consistency for constrained class models and
		  exploits the semantic properties of constraint patterns,
		  thereby enabling syntax-based consistency checking in
		  polynomial-time. We introduce a consistency checker
		  implementing these ideas and we report on case studies in
		  applying our approach to analyze industrial-scale models.
		  These studies show that pattern-based constraint
		  development supports the creation of concise specifications
		  and provides immediate feedback on model consistency.},
  public	= {yes},
  issn		= {1619-1366},
  volume	= 9,
  number	= 2,
  month		= apr,
  doi		= {10.1007/s10270-009-0123-6},
  pages		= {225--255},
  pdf		= {http://www.brucker.ch/bibliography/download/2010/wahler.ea-efficient-2010.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/wahler.ea-efficient-2010}
		  
}

@InProceedings{	  wahler.ea:model-driven:2006,
  abstract	= {A high level of detail and well-formedness of models have
		  become crucial ingredients in model-driven development.
		  Constraints play a central role in model precision and
		  validity. However, the task of constraint development is
		  time-consuming and error-prone because constraints can be
		  arbitrarily complex in real-world models.To overcome this
		  problem, we propose a solution that we call model-driven
		  constraint engineering. In our solution, we define
		  constraint patterns, add structure and develop a taxonomy
		  for them. The constraint patterns integrate into the
		  \acs{uml} meta-model. These computation-independent,
		  parameterized patterns are transformed into
		  platform-independent constraints by a model transformation.
		  In addition, we show how our approach can be supported by a
		  tool.},
  author	= {Michael Wahler and Jana Koehler and Achim D. Brucker},
  booktitle	= {\acs{ocl} for (Meta-)Models in Multiple Application
		  Domains},
  language	= {USenglish},
  public	= {no},
  classification= {workshop},
  areas		= {software},
  keywords	= {constraints, \acs{mda}, \acs{mde}, \acs{uml}, \acs{ocl}},
  pages		= {111--125},
  title		= {Model-Driven Constraint Engineering},
  editor	= {Birgith Demuth and Dan Chiorean and Martin Gogolla and Jos
		  Warmer},
  note		= {Available as Technical Report, University Dresden, number
		  \acs{tud-fi06-04-}Sept. 2006.},
  issn		= {1430-211X},
  organization	= {University Dresden},
  location	= {Genova, Italy},
  year		= 2006,
  pdf		= {http://www.brucker.ch/bibliography/download/2006/wahler.ea-model-driven-2006.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/wahler.ea-model-driven-2006}
		  
}

@Article{	  wahler.ea:model-driven:2006-b,
  abstract	= {A high level of detail and well-formedness of models have
		  become crucial ingredients in model-driven development.
		  Constraints play a central role in model precision and
		  validity. However, the task of constraint development is
		  time-consuming and error-prone because constraints can be
		  arbitrarily complex in real-world models.To overcome this
		  problem, we propose a solution that we call model-driven
		  constraint engineering. In our solution, we define
		  constraint patterns, add structure and develop a taxonomy
		  for them. The constraint patterns integrate into the
		  \acs{uml} meta-model. These computation-independent,
		  parameterized patterns are transformed into
		  platform-independent constraints by a model transformation.
		  In addition, we show how our approach can be supported by a
		  tool.},
  author	= {Michael Wahler and Jana Koehler and Achim D. Brucker},
  language	= {USenglish},
  public	= {yes},
  classification= {workshop},
  areas		= {software},
  keywords	= {constraint, pattern, model-driven engineering, \acs{uml},
		  \acs{ocl}},
  title		= {Model-Driven Constraint Engineering},
  editor	= {Birgith Demuth and Dan Chiorean and Martin Gogolla and Jos
		  Warmer},
  issn		= {1863-2122},
  volume	= 5,
  year		= 2006,
  journal	= j-eceasst,
  copyright	= {\acs{eceasst}},
  copyrighturl	= {http://eceasst.cs.tu-berlin.de/index.php/eceasst/article/view/44}
		  ,
  pdf		= {http://www.brucker.ch/bibliography/download/2006/wahler.ea-model-driven-2006-b.pdf}
		  ,
  url		= {http://www.brucker.ch/bibliography/abstract/wahler.ea-model-driven-2006-b}
		  
}

@InCollection{	  wenzel.ea:building:2007,
  abstract	= {We present the generic system framework of
		  Isabelle/Isarunderlying recent versions of Isabelle. Among
		  other things, Isar provides an infrastructure for Isabelle
		  plug-ins, comprising extensible state components and
		  extensible syntax that can be bound to tactical ML
		  programs. Thus the Isabelle/Isar architecture may be
		  understood as an extension and refinement of the
		  traditional LCF approach, with explicit infrastructure for
		  building derivative systems. To demonstrate the technical
		  potential of the framework, we apply it to a concrete
		  formalmethods tool: the HOL-Z 3.0 environment, which is
		  geared towards the analysis of Z specifications and formal
		  proof of forward-refinements.},
  author	= {Makarius Wenzel and Burkhart Wolff},
  booktitle	= {\acs{tphols} 2007},
  editor	= {Klaus Schneider and Jens Brandt},
  language	= {USenglish},
  acknowledgement={none},
  pages		= {352--367},
  publisher	= pub-springer,
  address	= pub-springer:adr,
  number	= 4732,
  series	= s-lncs,
  title		= {Building Formal Method Tools in the {Isabelle}/{Isar}
		  Framework},
  doi		= {10.1007/978-3-540-74591-4_26},
  year		= 2007
}

@PhDThesis{	  wenzel:isabelleisar:2002,
  author	= {Markus M. Wenzel},
  title		= {Isabelle/Isar --- a versatile environment for
		  human-readable formal proof documents},
  school	= {TU M{\"u}nchen},
  year		= 2002,
  url		= {http://tumb1.biblio.tu-muenchen.de/publ/diss/in/2002/wenzel.html}
		  ,
  abstract	= {The basic motivation of this work is to make formal theory
		  developments with machine-checked proofs accessible to a
		  broader audience. Our particular approach is centered
		  around the Isar formal proof language that is intended to
		  support adequate composition of proof documents that are
		  suitable for human consumption. Such primary proofs written
		  in Isar may be both checked by the machine and read by
		  human-beings; final presentation merely involves trivial
		  pretty printing of the sources. Sound logical foundations
		  of Isar are achieved by interpretation within the generic
		  Natural Deduction framework of Isabelle, reducing all
		  high-level reasoning steps to primitive inferences.
		  
		  The resulting Isabelle/Isar system is generic with respect
		  to object-logics and proof tools, just as pure Isabelle
		  itself. The full Isar language emerges from a small core by
		  means of several derived elements, which may be combined
		  freely with existing ones. This results in a very rich
		  space of expressions of formal reasoning, supporting many
		  viable proof techniques. The general paradigms of Natural
		  Deduction and Calculational Reasoning are both covered
		  particularly well. Concrete examples from logic,
		  mathematics, and computer-science demonstrate that the Isar
		  concepts are indeed sufficiently versatile to cover a broad
		  range of applications.},
  address	= {M{\"u}nchen},
  month		= feb,
  acknowledgement={none},
  bibkey	= {wenzel:isabelleisar:2002}
}
@Proceedings{     grumberg.ea:tools:2007,
  editor        = {Orna Grumberg and Michael Huth},
  title         = {Tools and Algorithms for the Construction and Analysis of
                  Systems, 13th International Conference, TACAS 2007, Held as
                  Part of the Joint European Conferences on Theory and
                  Practice of Software, ETAPS 2007 Braga, Portugal, March 24
                  - April 1, 2007, Proceedings},
  booktitle     = {TACAS},
  publisher     = pub-springer,
  address       = pub-springer:adr,
  series        = s-lncs,
  volume        = 4424,
  year          = 2007,
  isbn          = {978-3-540-71208-4}
}
